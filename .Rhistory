#----------------------------------------------------
# Build and Tests
#----------------------------------------------------
library(devtools)
rm(list = ls())
devtools::load_all()
devtools::document()
?constrain_streams
devtools::test()  # Run tests
getwd()
#----------------------------------------------------
# Build and Tests
#----------------------------------------------------
library(devtools)
rm(list = ls())
devtools::load_all()
remove.packages("wsep.t2")
remove.packages("wsep.t2")
remove.packages("wsep.t2")
remove.packages("wsep.t2")
#----------------------------------------------------
# Build and Tests
#----------------------------------------------------
library(devtools)
rm(list = ls())
getwd()
setwd('./wsep.t2')
setwd('C:/Users/mbayly/Desktop/Projects/EN2715 WSEP/wsep.t2')
rm(list = ls())
devtools::load_all()
remove.packages("wsep.t2")
install.packages(getwd(), repos = NULL, type = "source")
remove.packages("spsurvey")
remove.packages("spsurvey")
remove.packages("spsurvey")
library(remotes)
remotes::install_github("essatech/wsep.t2")
?install.packages
install.packages(getwd(), repos = NULL, type = "source", dependencies = "Imports")
install.packages("spsurvey")
library(spsurvey)
install.packages(getwd(), repos = NULL, type = "source", dependencies = "Imports")
remove.packages("wsep.t2")
remove.packages("wsep.t2")
remove.packages("wsep.t2")
rm(list = ls())
devtools::load_all()
devtools::document()
?constrain_streams
devtools::test()  # Run tests
devtools::check() # Operating system test
#roads <- st_read(dsn = "C:/Users/mbayly/Desktop/Projects/EN2715 WSEP/data/demo.gdb", layer = "roads")
#strm <- st_read("C:/Users/mbayly/Desktop/Projects/EN2715 WSEP/data/demo.gdb", layer = "strm")
# Update with new data
roads <- st_read("C:/Users/mbayly/Desktop/Projects/EN2715 WSEP/data/redo tslon/roads2.gpkg")
strm <- st_read("C:/Users/mbayly/Desktop/Projects/EN2715 WSEP/data/redo tslon/streams2.gpkg")
colnames(strm)
plot(st_geometry(strm))
plot(st_geometry(roads))
# Keep only relevant columns
head(strm)
strm <- strm[, c("LINEAR_FEATURE_ID", "EDGE_TYPE", "STREAM_ORDER", "GNIS_NAME")]
# Keep only relevant columns
head(strm)
st_crs(strm)$epsg
getwd()
TsolumStreams <- strm
save(TsolumStreams, file = "data/TsolumStreams.rda")
roads <- roads[, c("TRANSPORT_LINE_ID")]
head(roads)
roads$id <- 1:nrow(roads)
roads <- roads[, c("id")]
st_crs(roads)$epsg
getwd()
TsolumRoads <- roads
save(TsolumRoads, file = "data/TsolumRoads.rda")
rm(roads)
# Resvave data
load("data/TsolumStreams.rda")
load("data/TsolumRoads.rda")
use_data(TsolumStreams, TsolumRoads,
overwrite = TRUE)
remove.packages("wsep.t2")
remove.packages("wsep.t2")
remove.packages("wsep.t2")
remove.packages("wsep.t2")
rm(list = ls())
devtools::load_all()
devtools::document()
?constrain_streams
devtools::test()  # Run tests
data(TsolumStreams)
strm <- TsolumStreams
data(TsolumRoads)
roads <- TsolumRoads
# Load the WSEP Tier 2 R-package
library(wsep.t2)
remove.packages("wsep.t2")
remove.packages("wsep.t2")
remove.packages("wsep.t2")
remove.packages("wsep.t2")
rm(list = ls())
devtools::load_all()
# Will must re-project our data so that x,y are cartesian coordinates with units of meters
strm <- utm_projection(data = strm)
data(TsolumStreams)
strm <- TsolumStreams
data(TsolumRoads)
roads <- TsolumRoads
# Will must re-project our data so that x,y are cartesian coordinates with units of meters
strm <- utm_projection(data = strm)
# Then constrain the sampling frame to remove 1st order tribs less than 600m in length and clip the upper 300m off of other tributaries. see ?constrain_streams for details
c_ctrm <- constrain_streams(strm = strm,
length_remove = 600,
length_trim = 300)
# Remove lakes and other lotic reaches. Consider removing any other lakes manually or through a simple filter
c_strm <- remove_lentic_bcfwa(strm = c_ctrm,
EDGE_TYPE = "EDGE_TYPE")
# Remove alpine areas - In this example set to all segments over 800 m (adjust for your region)
ca_strm <- remove_alpine_bcfwa(strm = c_strm,
elevation_threshold = 800)
# (Optional) Visualize original (raw) and constrained streams. Finalize and adjust with any additional filters
strm1_plot <- sf::st_zm(strm)
strm2_plot <- sf::st_zm(ca_strm)
plot(sf::st_geometry(strm1_plot), col = "lightgrey",
main = "Constrained Streams")
plot(sf::st_geometry(strm2_plot), col = "blue", add = TRUE)
legend("topright", c("original", "adjusted"),
col = c("lightgrey", "blue"), lwd = 1)
# (Optional) Visualize original (raw) and constrained streams. Finalize and adjust with any additional filters
strm1_plot <- sf::st_zm(strm)
strm2_plot <- sf::st_zm(ca_strm)
plot(sf::st_geometry(strm1_plot), col = "lightgrey",
main = "Constrained Streams")
plot(sf::st_geometry(strm2_plot), col = "blue", add = TRUE)
legend("topright", c("original", "adjusted"),
col = c("lightgrey", "blue"), lwd = 1)
ca_strm$strata <- NA
ca_strm$strata <- ifelse(ca_strm$STREAM_ORDER < 3, "stratum_1", ca_strm$strata)
ca_strm$strata <- ifelse(ca_strm$STREAM_ORDER >= 3, "stratum_2", ca_strm$strata)
plot(ca_strm["strata"], main = "Sampling Stratum")
dev.off()
ca_strm$strata <- NA
ca_strm$strata <- ifelse(ca_strm$STREAM_ORDER < 3, "stratum_1", ca_strm$strata)
ca_strm$strata <- ifelse(ca_strm$STREAM_ORDER >= 3, "stratum_2", ca_strm$strata)
plot(ca_strm["strata"], main = "Sampling Stratum")
dev.off()
dev.off()
ca_strm$strata <- NA
ca_strm$strata <- ifelse(ca_strm$STREAM_ORDER < 3, "stratum_1", ca_strm$strata)
ca_strm$strata <- ifelse(ca_strm$STREAM_ORDER >= 3, "stratum_2", ca_strm$strata)
plot(ca_strm["strata"], main = "Sampling Stratum")
ca_strm$strata <- NA
ca_strm$strata <- ifelse(ca_strm$STREAM_ORDER < 3, "stratum_1", ca_strm$strata)
ca_strm$strata <- ifelse(ca_strm$STREAM_ORDER >= 3, "stratum_2", ca_strm$strata)
plot(ca_strm["strata"], main = "Sampling Stratum")
par()
par(mar = c(5.1,4.1,4.1,4.1))
ca_strm$strata <- NA
ca_strm$strata <- ifelse(ca_strm$STREAM_ORDER < 3, "stratum_1", ca_strm$strata)
ca_strm$strata <- ifelse(ca_strm$STREAM_ORDER >= 3, "stratum_2", ca_strm$strata)
plot(ca_strm["strata"], main = "Sampling Stratum")
dev.off()
dev.off()
par(mar = c(5.1,4.1,4.1,4.1))
ca_strm$strata <- NA
ca_strm$strata <- ifelse(ca_strm$STREAM_ORDER < 3, "stratum_1", ca_strm$strata)
ca_strm$strata <- ifelse(ca_strm$STREAM_ORDER >= 3, "stratum_2", ca_strm$strata)
plot(ca_strm["strata"], main = "Sampling Stratum")
par()
par(mai = c(0.9908571, 0.7965714, 0.7965714, 0.7965714))
ca_strm$strata <- NA
ca_strm$strata <- ifelse(ca_strm$STREAM_ORDER < 3, "stratum_1", ca_strm$strata)
ca_strm$strata <- ifelse(ca_strm$STREAM_ORDER >= 3, "stratum_2", ca_strm$strata)
plot(ca_strm["strata"], main = "Sampling Stratum")
par(mai = c(0.9908571, 0.7965714, 0.7965714, 0.965714))
ca_strm$strata <- NA
ca_strm$strata <- ifelse(ca_strm$STREAM_ORDER < 3, "stratum_1", ca_strm$strata)
ca_strm$strata <- ifelse(ca_strm$STREAM_ORDER >= 3, "stratum_2", ca_strm$strata)
plot(ca_strm["strata"], main = "Sampling Stratum")
par(mai = c(0.9908571, 0.7965714, 0.7965714, 0.965714))
ca_strm$strata <- NA
ca_strm$strata <- ifelse(ca_strm$STREAM_ORDER < 3, "1", ca_strm$strata)
ca_strm$strata <- ifelse(ca_strm$STREAM_ORDER >= 3, "2", ca_strm$strata)
plot(ca_strm["strata"], main = "Sampling Stratum")
ca_strm$strata <- NA
ca_strm$strata <- ifelse(ca_strm$STREAM_ORDER < 3, "stratum_1", ca_strm$strata)
ca_strm$strata <- ifelse(ca_strm$STREAM_ORDER >= 3, "stratum_2", ca_strm$strata)
ca_strm$strata <- NA
ca_strm$strata <- ifelse(ca_strm$STREAM_ORDER < 3, "stratum_1", ca_strm$strata)
ca_strm$strata <- ifelse(ca_strm$STREAM_ORDER >= 3, "stratum_2", ca_strm$strata)
plot(ca_strm["strata"], main = "Sampling Stratum")
# -------------------------------------------
# (Optional) visualize
strm_plot <- sf::st_zm(ca_strm)
road_plot <- sf::st_zm(roads)
plot(sf::st_geometry(strm_plot), col = "darkblue", main = "Site Type A (stream crossing)")
plot(sf::st_geometry(road_plot), add = TRUE, col = "burlywood")
plot(sf::st_geometry(site_type_a), add = TRUE, col = ifelse(site_type_a$strata == "stratum_1", "black", "red"), pch = 19)
legend("topright", c("roads", "streams", "stratum 1", "stratum 2"), col = c("burlywood", "darkblue", "black", "red"), lwd = c(1, 1, NA, NA), pch = c(NA, NA, 19, 19))
# Ensure road projection matches stream
roads <- utm_projection(data = roads)
# Define crossings as the intersection of streams and roads
crossings <- sf::st_intersection(ca_strm, roads)
# Take a random sample of crossings by strata
site_type_a <- grouped_random_sample(data = crossings,
group_name = "strata",
n = 20)
# -------------------------------------------
# (Optional) visualize
strm_plot <- sf::st_zm(ca_strm)
road_plot <- sf::st_zm(roads)
plot(sf::st_geometry(strm_plot), col = "darkblue", main = "Site Type A (stream crossing)")
plot(sf::st_geometry(road_plot), add = TRUE, col = "burlywood")
plot(sf::st_geometry(site_type_a), add = TRUE, col = ifelse(site_type_a$strata == "stratum_1", "black", "red"), pch = 19)
legend("topright", c("roads", "streams", "stratum 1", "stratum 2"), col = c("burlywood", "darkblue", "black", "red"), lwd = c(1, 1, NA, NA), pch = c(NA, NA, 19, 19))
# Run the function for road proximity samples
?road_proximity_sample
type_b <- road_proximity_sample(
n = 20,
strm = ca_strm,
roads = roads,
buffer_s1_m = 20,
buffer_s2_m = 40,
buffer_crossings_m = 30, # 100m
small_strm_segment_m = 20, # 50m
stream_order = "STREAM_ORDER"
)
# Get the points object
names(type_b)
# Get the points object
names(type_b)
site_type_b <- type_b$points
# -------------------------------------------
# (Optional) visualize
strm_plot <- sf::st_zm(ca_strm)
road_plot <- sf::st_zm(roads)
plot(sf::st_geometry(strm_plot), col = "darkblue", main = "Site Type B (road proximity)")
plot(sf::st_geometry(road_plot), add = TRUE, col = "burlywood")
plot(sf::st_geometry(site_type_b), add = TRUE, col = ifelse(site_type_b$strata == "stratum_1", "black", "red"), pch = 19)
legend("topright", c("roads", "streams", "stratum 1", "stratum 2"), col = c("burlywood", "darkblue", "black", "red"), lwd = c(1, 1, NA, NA), pch = c(NA, NA, 19, 19))
site_type_c <- strm_crossings_grts(n = 20, strm = ca_strm, roads = roads, stream_order = 'STREAM_ORDER')
# -------------------------------------------
# (Optional) visualize
plot(sf::st_geometry(strm_plot), col = "darkblue", main = "Site Type C (riparian-crossings)")
plot(sf::st_geometry(road_plot), add = TRUE, col = "burlywood")
plot(sf::st_geometry(site_type_c), add = TRUE, col = ifelse(site_type_b$strata == "stratum_1", "black", "red"), pch = 19)
legend("topright", c("roads", "streams", "stratum 1", "stratum 2"), col = c("burlywood", "darkblue", "black", "red"), lwd = c(1, 1, NA, NA), pch = c(NA, NA, 19, 19))
#----------------------------------------------------
# Build and Tests
#----------------------------------------------------
library(devtools)
rm(list = ls())
devtools::load_all()
devtools::document()
devtools::check() # Operating system test
remove.packages("wsep.t2")
remove.packages("wsep.t2")
remove.packages("wsep.t2")
install.packages(getwd(), repos = NULL, type = "source", dependencies = "Imports")
rm(list = ls())
install.packages(getwd(), repos = NULL, type = "source", dependencies = "Imports")
