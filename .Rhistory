}
allsites <- suppressWarnings({ sf::st_cast(allsites, "POINT") })
allsites <- allsites[!(duplicated(allsites$site_id)), ]
# Get utm and lat long coordinates
cutm <- sf::st_coordinates(allsites)
cutm <- as.matrix(cutm)
cutm <- as.data.frame(cutm)
allsites_ll <- sf::st_transform(allsites, 4326)
cll <- sf::st_coordinates(allsites_ll)
cll <- as.matrix(cll)
cll <- as.data.frame(cll)
asd <- allsites
sf::st_geometry(asd) <- NULL
epsg <- sf::st_crs(allsites)$epsg
utm_zone <- substrRight(epsg, 2)
asd$utm_zone <- utm_zone
asd$easting <- cutm$X
asd$northing <- cutm$Y
asd$latitude <- cll$Y
asd$longitude <- cll$X
utils::write.csv(asd, file = paste0(output_dir, "sites.csv"), na = "NA", row.names = FALSE)
asd <- asd[order(asd$type, asd$strata), ]
unique(asd$type)
seperate_files
seperate_files = TRUE
if(seperate_files) {
asd_a <- asd[which(asd$type == "type_a"), ]
utils::write.csv(asd_a, file = paste0(output_dir, "sites_type_a.csv"), na = "", row.names = FALSE)
asd_b <- asd[which(asd$type == "type_b"), ]
utils::write.csv(asd_b, file = paste0(output_dir, "sites_type_b.csv"), na = "", row.names = FALSE)
asd_c <- asd[which(asd$type == "type_c"), ]
utils::write.csv(asd_c, file = paste0(output_dir, "sites_type_c.csv"), na = "", row.names = FALSE)
} else {
utils::write.csv(asd, file = paste0(output_dir, "sites.csv"), na = "", row.names = FALSE)
}
head(sites)
sites <- allsites_ll
segments <- type_b$line_segments
segments <- suppressWarnings({ sf::st_cast(segments, "LINESTRING") })
segments <- sf::st_transform(segments, 4326)
head(sites)
#' @title Export Sites
#'
#' @description
#' Export sampling sites for field programs
#'
#' @details
#' Define an output directory to export field sampling sites. Choose from available output formats. Note that when exporting to KML and SHP file format the data will be re-projected to latitude/longitude (EPSG: 4326).
#'
#' @param output_dir String. Local file path the an output directory on your computer.
#' @param site_type_a Sample Sites Type A. sf data frame returned from `grouped_random_sample()`
#' @param type_b Sample Sites of Type B and line segments. Object returned from `road_proximity_sample()`.
#' @param site_type_c Sample Sites Type C. sf data frame returned from `strm_crossings_grts()`
#' @param export_csv Boolean. Should a csv file be exported to the output directory.
#' @param export_shp Boolean. Should a shp (shape file) file be exported to the output directory.
#' @param export_kml Boolean. Should a kml file be exported to the output directory.
#' @param seperate_files Boolean. Should seperate files be created for each site type.
#'
#' @return
#' Populates the export directory with output files
#'
#'
#'
#' @export
export_sites <- function(output_dir = NA,
site_type_a = NA,
type_b = NA,
site_type_c = NA,
export_csv = TRUE,
export_shp = TRUE,
export_kml = TRUE,
seperate_files = TRUE) {
if(!(dir.exists(output_dir))) {
stop("Could not find output directory")
}
substrRight <- function(x, n) {
substr(x, nchar(x)-n+1, nchar(x))
}
last_char <- substrRight(output_dir, 1)
if(last_char != "/") {
output_dir <- paste0(output_dir, "/")
}
site_type_a$length_m <- NA
sta <- site_type_a[, c("site_id", "strata", "type", "length_m", "stream_order")]
stb <- type_b$points
stb <- stb[, c("site_id", "strata", "type", "length_m", "stream_order")]
stc <- site_type_c
stc <- stc[, c("site_id", "strata", "type", "length_m", "stream_order")]
rename_geometry <- function(g, name) {
current = attr(g, "sf_column")
names(g)[names(g)==current] = name
sf::st_geometry(g)=name
return(g)
}
sta <- rename_geometry(sta, "geomf")
stb <- rename_geometry(stb, "geomf")
stc <- rename_geometry(stc, "geomf")
if(nrow(stb) > 0) {
allsites <- rbind(sta, stb)
} else {
allsites <- sta
}
if(nrow(stc) > 0) {
allsites <- rbind(allsites, stc)
}
allsites <- suppressWarnings({ sf::st_cast(allsites, "POINT") })
allsites <- allsites[!(duplicated(allsites$site_id)), ]
# Get utm and lat long coordinates
cutm <- sf::st_coordinates(allsites)
cutm <- as.matrix(cutm)
cutm <- as.data.frame(cutm)
allsites_ll <- sf::st_transform(allsites, 4326)
cll <- sf::st_coordinates(allsites_ll)
cll <- as.matrix(cll)
cll <- as.data.frame(cll)
asd <- allsites
sf::st_geometry(asd) <- NULL
epsg <- sf::st_crs(allsites)$epsg
utm_zone <- substrRight(epsg, 2)
asd$utm_zone <- utm_zone
asd$easting <- cutm$X
asd$northing <- cutm$Y
asd$latitude <- cll$Y
asd$longitude <- cll$X
asd <- asd[order(asd$type, asd$strata), ]
if(export_csv) {
if(seperate_files) {
asd_a <- asd[which(asd$type == "type_a"), ]
utils::write.csv(asd_a, file = paste0(output_dir, "sites_type_a.csv"), na = "", row.names = FALSE)
asd_b <- asd[which(asd$type == "type_b"), ]
utils::write.csv(asd_b, file = paste0(output_dir, "sites_type_b.csv"), na = "", row.names = FALSE)
asd_c <- asd[which(asd$type == "type_c"), ]
utils::write.csv(asd_c, file = paste0(output_dir, "sites_type_c.csv"), na = "", row.names = FALSE)
} else {
utils::write.csv(asd, file = paste0(output_dir, "sites.csv"), na = "", row.names = FALSE)
}
}
sites <- allsites_ll
segments <- type_b$line_segments
segments <- suppressWarnings({ sf::st_cast(segments, "LINESTRING") })
segments <- sf::st_transform(segments, 4326)
if(export_shp) {
if(seperate_files) {
sites_a <- sites[which(sites$type == "type_a"), ]
suppressWarnings({ sf::st_write(sites_a, dsn = paste0(output_dir, "sites_type_a.shp"), delete_dsn = TRUE) })
sites_b <- sites[which(sites$type == "type_b"), ]
suppressWarnings({ sf::st_write(sites_b, dsn = paste0(output_dir, "sites_type_b.shp"), delete_dsn = TRUE) })
sites_c <- sites[which(sites$type == "type_c"), ]
suppressWarnings({ sf::st_write(sites_c, dsn = paste0(output_dir, "sites_type_c.shp"), delete_dsn = TRUE) })
} else {
suppressWarnings({ sf::st_write(sites, dsn = paste0(output_dir, "sites.shp"), delete_dsn = TRUE) })
}
suppressWarnings({ sf::st_write(segments, dsn = paste0(output_dir, "segments.shp"), delete_dsn = TRUE) })
}
if(export_kml) {
if(seperate_files) {
sites_a <- sites[which(sites$type == "type_a"), ]
suppressWarnings({ sf::st_write(sites_a, dsn = paste0(output_dir, "sites_type_a.kml"), delete_dsn = TRUE) })
sites_b <- sites[which(sites$type == "type_b"), ]
suppressWarnings({ sf::st_write(sites_b, dsn = paste0(output_dir, "sites_type_b.kml"), delete_dsn = TRUE) })
sites_c <- sites[which(sites$type == "type_c"), ]
suppressWarnings({ sf::st_write(sites_c, dsn = paste0(output_dir, "sites_type_c.kml"), delete_dsn = TRUE) })
} else {
suppressWarnings({ sf::st_write(sites, dsn = paste0(output_dir, "sites.kml"), delete_dsn = TRUE) })
}
suppressWarnings({ sf::st_write(segments, dsn = paste0(output_dir, "segments.kml"), delete_dsn = TRUE) })
}
}
export_sites(output_dir = output_dir,
site_type_a = site_type_a,
type_b = type_b,
site_type_c = site_type_c,
export_csv = TRUE,
export_shp = TRUE,
export_kml = TRUE)
remove.packages("wsep.t2")
remove.packages("wsep.t2")
rm(list = ls())
library(devtools)
rm(list = ls())
devtools::load_all()
devtools::document()
?constrain_streams
devtools::test()  #
devtools::check() # Operating system test
getwd()
getwd()
rm(list = ls())
rm(list = ls())
library(devtools)
rm(list = ls())
devtools::load_all()
devtools::document()
?constrain_streams
devtools::test()  # Run tests
devtools::check() # Operating system test
# You may need to install remotes
library(remotes)
# Choose all if promp to update packages
remotes::install_github("essatech/wsep.t2")
# Run with sample dataset
library(wsep.t2)
data(TsolumStreams)
strm <- TsolumStreams
data(TsolumRoads)
roads <- TsolumRoads
# Import your own data here (update directories and uncomment lines)
# libra
# Load the WSEP Tier 2 R-package
library(wsep.t2)
# Will must re-project our data so that x,y are cartesian coordinates with units of meters
strm <- utm_projection(data = strm)
# Then constrain the sampling frame to remove 1st order tribs less than 600m in length and clip the upper 300m off of other tributaries. see ?constrain_streams for details
c_ctrm <- constrain_streams(strm = strm,
length_remove = 500,
length_trim = 200)
# Remove lakes and other lotic reaches.
# Consider removing any other lakes manually or through a simple filter
c_strm <- remove_lentic_bcfwa(strm = c_ctrm,
EDGE_TYPE = "EDGE_TYPE")
# Remove alpine areas
# In this example set to all segments over 800 m (adjust for your region)
ca_strm <- remove_alpine_bcfwa(strm = c_strm,
elevation_threshold = 800)
# (Optional) Visualize original (raw) and constrained streams.
# Finalize and adjust with any additional filters
strm1_plot <- sf::st_zm(strm)
strm2_plot <- sf::st_zm(ca_strm)
plot(sf::st_geometry(strm1_plot), col = "lightgrey",
main = "Constrained Streams")
plot(sf::st_geometry(strm2_plot), col = "blue", add = TRUE)
legend("topright", c("original", "adjusted"),
col = c("lightgrey", "blue"), lwd = 1)
ca_strm$strata <- NA
ca_strm$strata <- ifelse(ca_strm$STREAM_ORDER < 3, "stratum_1", ca_strm$strata)
ca_strm$strata <- ifelse(ca_strm$STREAM_ORDER >= 3, "stratum_2", ca_strm$strata)
plot(ca_strm["strata"], main = "Sampling Stratum")
# Ensure road projection matches stream
roads <- utm_projection(data = roads)
# Define crossings as the intersection of streams and roads
crossings <- sf::st_intersection(ca_strm, roads)
# Take a random sample of crossings by strata
site_type_a <- grouped_random_sample(data = crossings,
group_name = "strata",
n = 40,
stream_order = "STREAM_ORDER"
)
# -------------------------------------------
# (Optional) visualize
strm_plot <- sf::st_zm(ca_strm)
road_plot <- sf::st_zm(roads)
plot(sf::st_geometry(strm_plot), col = "darkblue", main = "Site Type A (stream crossing)")
plot(sf::st_geometry(road_plot), add = TRUE, col = "burlywood")
plot(sf::st_geometry(site_type_a), add = TRUE, col = ifelse(site_type_a$strata == "stratum_1", "black", "red"), pch = 19)
legend("topright", c("roads", "streams", "stratum 1", "stratum 2"), col = c("burlywood", "darkblue", "black", "red"), lwd = c(1, 1, NA, NA), pch = c(NA, NA, 19, 19))
# Run the function for road proximity samples
?road_proximity_sample
type_b <- road_proximity_sample(
n = 40,
strm = ca_strm,
roads = roads,
buffer_s1_m = 20,
buffer_s2_m = 40,
buffer_crossings_m = 50, # 100m
small_strm_segment_m = 30, # 50m
stream_order = "STREAM_ORDER"
)
# Get the points object
names(type_b)
site_type_b <- type_b$points
line_segments <- type_b$line_segments
# -------------------------------------------
# (Optional) visualize
strm_plot <- sf::st_zm(ca_strm)
road_plot <- sf::st_zm(roads)
plot(sf::st_geometry(strm_plot), col = "darkblue", main = "Site Type B (road proximity)")
plot(sf::st_geometry(road_plot), add = TRUE, col = "burlywood")
plot(sf::st_geometry(site_type_b), add = TRUE, col = ifelse(site_type_b$strata == "stratum_1", "black", "red"), pch = 19)
legend("topright", c("roads", "streams", "stratum 1", "stratum 2"), col = c("burlywood", "darkblue", "black", "red"), lwd = c(1, 1, NA, NA), pch = c(NA, NA, 19, 19))
site_type_c <- strm_crossings_grts(
n = 40,
strm = ca_strm,
roads = roads,
stream_order = 'STREAM_ORDER'
)
# -------------------------------------------
# (Optional) visualize
plot(sf::st_geometry(strm_plot), col = "darkblue", main = "Site Type C (riparian-crossings)")
plot(sf::st_geometry(road_plot), add = TRUE, col = "burlywood")
plot(sf::st_geometry(site_type_c), add = TRUE, col = ifelse(site_type_b$strata == "stratum_1", "black", "red"), pch = 19)
legend("topright", c("roads", "streams", "stratum 1", "stratum 2"), col = c("burlywood", "darkblue", "black", "red"), lwd = c(1, 1, NA, NA), pch = c(NA, NA, 19, 19))
# Output directory
output_dir <- "C:/Users/mbayly/Desktop/delete/my_sites"
export_sites(output_dir = output_dir,
site_type_a = site_type_a,
type_b = type_b,
site_type_c = site_type_c,
export_csv = TRUE,
export_shp = TRUE,
export_kml = TRUE)
# You may need to install remotes
library(remotes)
# Choose all if promp to update packages
remotes::install_github("essatech/wsep.t2")
library(wsep.t2)
remove.packages("wsep.t2")
remove.packages("wsep.t2")
remove.packages("wsep.t2")
remove.packages("wsep.t2")
# You may need to install remotes
library(remotes)
# Choose all if promp to update packages
remotes::install_github("essatech/wsep.t2")
library(wsep.t2)
library(remotes)
remotes::install_github("essatech/wsep.t2")
library(wsep.t2)
```r
# Run with sample dataset
library(wsep.t2)
data(TsolumStreams)
strm <- TsolumStreams
data(TsolumRoads)
roads <- TsolumRoads
```r
# Load the WSEP Tier 2 R-package
library(wsep.t2)
# Will must re-project our data so that x,y are cartesian coordinates with units of meters
strm <- utm_projection(data = strm)
# Then constrain the sampling frame to remove 1st order tribs less than 600m in length and clip the upper 300m off of other tributaries. see ?constrain_streams for details
c_ctrm <- constrain_streams(strm = strm,
length_remove = 500,
length_trim = 200)
# Remove lakes and other lotic reaches.
# Consider removing any other lakes manually or through a simple filter
c_strm <- remove_lentic_bcfwa(strm = c_ctrm,
EDGE_TYPE = "EDGE_TYPE")
# Remove alpine areas
# In this example set to all segments over 800 m (adjust for your region)
ca_strm <- remove_alpine_bcfwa(strm = c_strm,
elevation_threshold = 800)
# (Optional) Visualize original (raw) and constrained streams.
# Finalize and adjust with any additional filters
strm1_plot <- sf::st_zm(strm)
strm2_plot <- sf::st_zm(ca_strm)
plot(sf::st_geometry(strm1_plot), col = "lightgrey",
main = "Constrained Streams")
plot(sf::st_geometry(strm2_plot), col = "blue", add = TRUE)
legend("topright", c("original", "adjusted"),
col = c("lightgrey", "blue"), lwd = 1)
```
<img src='man/figures/constrained_stream.PNG' align="center" height="450" style="padding: 10px;"/>
### Define Strata as Stream Order ###
Create a new field called `strata` that divides the remaining stream network based on stream order: `stratum_1` < 3rd order streams and `stratum_2` ≥ 3rd order streams.
# (Optional) Visualize original (raw) and constrained streams.
# Finalize and adjust with any additional filters
strm1_plot <- sf::st_zm(strm)
strm2_plot <- sf::st_zm(ca_strm)
plot(sf::st_geometry(strm1_plot), col = "lightgrey",
main = "Constrained Streams")
plot(sf::st_geometry(strm2_plot), col = "blue", add = TRUE)
legend("topright", c("original", "adjusted"),
col = c("lightgrey", "blue"), lwd = 1)
ca_strm$strata <- NA
ca_strm$strata <- ifelse(ca_strm$STREAM_ORDER < 3, "stratum_1", ca_strm$strata)
ca_strm$strata <- ifelse(ca_strm$STREAM_ORDER >= 3, "stratum_2", ca_strm$strata)
plot(ca_strm["strata"], main = "Sampling Stratum")
```r
# Ensure road projection matches stream
roads <- utm_projection(data = roads)
# Define crossings as the intersection of streams and roads
crossings <- sf::st_intersection(ca_strm, roads)
# Take a random sample of crossings by strata
site_type_a <- grouped_random_sample(data = crossings,
group_name = "strata",
n = 40,
stream_order = "STREAM_ORDER"
)
# -------------------------------------------
# (Optional) visualize
strm_plot <- sf::st_zm(ca_strm)
road_plot <- sf::st_zm(roads)
plot(sf::st_geometry(strm_plot), col = "darkblue", main = "Site Type A (stream crossing)")
plot(sf::st_geometry(road_plot), add = TRUE, col = "burlywood")
plot(sf::st_geometry(site_type_a), add = TRUE, col = ifelse(site_type_a$strata == "stratum_1", "black", "red"), pch = 19)
legend("topright", c("roads", "streams", "stratum 1", "stratum 2"), col = c("burlywood", "darkblue", "black", "red"), lwd = c(1, 1, NA, NA), pch = c(NA, NA, 19, 19))
```
<img src='man/figures/site_type_a.PNG' align="center" height="450" style="padding: 10px;"/>
```r
# Run the function for road proximity samples
?road_proximity_sample
type_b <- road_proximity_sample(
n = 40,
strm = ca_strm,
roads = roads,
buffer_s1_m = 20,
buffer_s2_m = 40,
buffer_crossings_m = 50, # 100m
small_strm_segment_m = 30, # 50m
stream_order = "STREAM_ORDER"
)
# Distances adjusted to provide better fit for urban watershed
# Get the points object
names(type_b)
site_type_b <- type_b$points
line_segments <- type_b$line_segments
table(type_b$strata)
# Get the points object
names(type_b)
site_type_b <- type_b$points
line_segments <- type_b$line_segments
table(type_b$strata)
site_type_b$strata
# Get the points object
names(type_b)
site_type_b <- type_b$points
line_segments <- type_b$line_segments
table(ite_type_b$strata)
# Get the points object
names(type_b)
site_type_b <- type_b$points
line_segments <- type_b$line_segments
table(site_type_b$strata)
type_b <- road_proximity_sample(
n = 60,
strm = ca_strm,
roads = roads,
buffer_s1_m = 20,
buffer_s2_m = 40,
buffer_crossings_m = 50, # 100m
small_strm_segment_m = 30, # 50m
stream_order = "STREAM_ORDER"
)
# Distances adjusted to provide better fit for urban watershed
names(type_b)
site_type_b <- type_b$points
line_segments <- type_b$line_segments
table(site_type_b$strata)
# # P
# -------------------------------------------
# (Optional) visualize
strm_plot <- sf::st_zm(ca_strm)
road_plot <- sf::st_zm(roads)
plot(sf::st_geometry(strm_plot), col = "darkblue", main = "Site Type B (road proximity)")
plot(sf::st_geometry(road_plot), add = TRUE, col = "burlywood")
plot(sf::st_geometry(site_type_b), add = TRUE, col = ifelse(site_type_b$strata == "stratum_1", "black", "red"), pch = 19)
legend("topright", c("roads", "streams", "stratum 1", "stratum 2"), col = c("burlywood", "darkblue", "black", "red"), lwd = c(1, 1, NA, NA), pch = c(NA, NA, 19, 19))
site_type_c <- strm_crossings_grts(
n = 100,
strm = ca_strm,
roads = roads,
stream_order = 'STREAM_ORDER'
)
```r
site_type_c <- strm_crossings_grts(
n = 100,
strm = ca_strm,
roads = roads,
stream_order = 'STREAM_ORDER'
)
table(site_type_c$strata)
ca_strm$strata
site_type_c_1 <- strm_crossings_grts(
n = 40,
strm = ca_strm[which(ca_strm$strata == "stratum_1")],
roads = roads,
stream_order = 'STREAM_ORDER'
)
site_type_c_1 <- strm_crossings_grts(
n = 40,
strm = ca_strm[which(ca_strm$strata == "stratum_1"), ],
roads = roads,
stream_order = 'STREAM_ORDER'
)
table(site_type_c$strata)
table(site_type_c_1$strata)
site_type_c_1 <- strm_crossings_grts(
n = 40,
strm = ca_strm[which(ca_strm$strata == "stratum_1"), ],
roads = roads,
stream_order = 'STREAM_ORDER'
)
site_type_c_2 <- strm_crossings_grts(
n = 40,
strm = ca_strm[which(ca_strm$strata == "stratum_2"), ],
roads = roads,
stream_order = 'STREAM_ORDER'
)
site_type_c <- rbind(site_type_c_1, site_type_c_2)
table(site_type_c$strata)
# -------------------------------------------
# (Optional) visualize
plot(sf::st_geometry(strm_plot), col = "darkblue", main = "Site Type C (riparian-crossings)")
plot(sf::st_geometry(road_plot), add = TRUE, col = "burlywood")
plot(sf::st_geometry(site_type_c), add = TRUE, col = ifelse(site_type_b$strata == "stratum_1", "black", "red"), pch = 19)
legend("topright", c("roads", "streams", "stratum 1", "stratum 2"), col = c("burlywood", "darkblue", "black", "red"), lwd = c(1, 1, NA, NA), pch = c(NA, NA, 19, 19))
# -------------------------------------------
# (Optional) visualize
plot(sf::st_geometry(strm_plot), col = "darkblue", main = "Site Type C (riparian-crossings)")
plot(sf::st_geometry(road_plot), add = TRUE, col = "burlywood")
plot(sf::st_geometry(site_type_c), add = TRUE, col = ifelse(site_type_b$strata == "stratum_1", "black", "red"), pch = 19)
legend("topright", c("roads", "streams", "stratum 1", "stratum 2"), col = c("burlywood", "darkblue", "black", "red"), lwd = c(1, 1, NA, NA), pch = c(NA, NA, 19, 19))
# Output directory
output_dir <- "C:/Users/mbayly/Desktop/delete/my_sites"
export_sites(output_dir = output_dir,
site_type_a = site_type_a,
type_b = type_b,
site_type_c = site_type_c,
export_csv = TRUE,
export_shp = TRUE,
export_kml = TRUE)
table(site_type_c$strata)
