by.x = "site_id",
by.y = "site_id",
all.x = TRUE,
all.y = FALSE)
merge(first_pt_sf, add_order,
by.x = "site_id",
by.y = "site_id",
all.x = TRUE,
all.y = FALSE)
add_order
add_order[, stream_order]
# Add on stream order
int_t <- suppressWarnings({ sf::st_intersection(strm, sf::st_buffer(first_pt_sf[, "site_id"], dist = 10)) })
add_order <- int_t[, c("site_id", stream_order)]
sf::st_geometry(add_order) <- NULL
add_order <- add_order[!(duplicated(add_order)), ]
add_order$stream_order <- as.numeric(add_order[, stream_order])
add_order
# Add on stream order
int_t <- suppressWarnings({ sf::st_intersection(strm, sf::st_buffer(first_pt_sf[, "site_id"], dist = 10)) })
add_order <- int_t[, c("site_id", stream_order)]
sf::st_geometry(add_order) <- NULL
add_order <- add_order[!(duplicated(add_order)), ]
add_order$stream_order <- as.numeric(add_order[, stream_order])
add_order <- add_order[, c("site_id", "stream_order")]
merge(first_pt_sf, add_order,
by.x = "site_id",
by.y = "site_id",
all.x = TRUE,
all.y = FALSE)
first_pt_sf_so <- merge(first_pt_sf, add_order,
by.x = "site_id",
by.y = "site_id",
all.x = TRUE,
all.y = FALSE)
# Return sample points and sample lines
ret_obj <- list()
ret_obj$points <- first_pt_sf_so
ret_obj$line_segments <- skeep_all
#' @title Road Proximity Sample
#'
#' @description
#' Road Proximity Sample for Site Type B
#'
#' @details
#' WSEP Tier II Road Proximity Sample for Site Type B
#' \itemize{
#'  \item{Apply a buffer (20m for < 3rd order and 40 m for ≥ 3rd order) streams.}
#'  \item{Taking the intersection of roads and this buffer}
#'  \item{Removing any stream crossings (Site Type A), by excluding any cases within 100 m of a crossing to avoid double counting}
#'  \item{Removing any segments < 50m in length unless they are near a switch-back (determined by manual review of the map). Switch-back determination is an optional manual step not automated in R code}
#'  \item{Providing the start point of the segment as well as the segment length and strata id (< 3rd order vs. ≥ 3rd order) and mapping the entire segment on the field maps to facilitate sampling}
#'  \item{Generate a random sample from the Site Type B list the strata with < 3rd order streams}
#'  \item{ Append the complete list of Site Type B from the ≥ 3rd order strata }
#'  \item{ Create a field checklist with at least the following fields: unique identifier (e.g., WatershedName_SD_B_001), coordinates of start point and end point, segment length, and Strata }
#' }
#' Note that there is no repeat sampling or replacement. If the sample size `n` exceeds the number of segments available for a stratum, then only the limited number of available locations will be returned.
#'
#' @param n Sample size n for each stratum. Defaults to 20.
#' @param strm A streamline data set of class `sf` from the BCFWA. Run `utm_projection()` first to ensure projection is in meters.
#' @param roads A road network data set of class `sf`. Run `utm_projection()` first to ensure projection is in meters.
#' @param buffer_s1_m Numeric. Buffer size (in meters) for Strata 1 streams < 3rd order. Defaults to 20 m.
#' @param buffer_s2_m Numeric. Buffer size (in meters) for Strata 2 streams >= 3rd order. Defaults to 40 m.
#' @param buffer_crossings_m Numeric. Exclusion buffer size (in meters) to stream-road crossings to exclude sample sites from Site Type A. Defaults to 100 m.
#' @param small_strm_segment_m Numeric. Remove small stream-road buffered segments unless they are near a switch-back (determined manually and added at end). Default small segment size is set to 50 m.
#' @param stream_order String. Column name for stream order. Defaults to `STREAM_ORDER`. Rename as needed.
#' @importFrom magrittr %>%
#'
#' @return
#' A object of class `sf` of sample features representing sample sites.
#'
#'
#' @export
road_proximity_sample <- function(
n = 20,
strm = NA,
roads = NA,
buffer_s1_m = 20,
buffer_s2_m = 40,
buffer_crossings_m = 100,
small_strm_segment_m = 50,
stream_order = "STREAM_ORDER"
) {
# Bind for non-standard
tmp_group_name <- NULL
L1 <- NULL
# Fix stream order column name
if(!(stream_order %in% colnames(strm))) {
stop(paste0("Could not find a column named ", stream_order, ". Check stream_order argument"))
}
vals <- strm[, stream_order]
sf::st_geometry(vals) <- NULL
vals <- vals[, 1]
vals <- as.numeric(vals)
strm$tmp_stream_order <- vals
# Recreate stream road crossings
sc2 <- suppressWarnings({ sf::st_intersection(roads, strm) })
# Apply buffer - group s1
ssub <- strm[which(strm$tmp_stream_order < 3), ]
# make placeholder dataframe
skeep_sb_s1 <- data.frame()
buff <- sf::st_buffer(roads, buffer_s1_m) # 20 m
buff <- buff %>% dplyr::group_by() %>% dplyr::summarise()
# Taking the intersection of roads and this buffer,
print("Stratum 1 streams and road buffer...")
rint <- suppressWarnings({ sf::st_intersection(ssub, buff) })
rint <- suppressWarnings({ sf::st_cast(rint, "LINESTRING") })
rint$tmp <- "samp"
rint <- rint[, c("tmp")]
# Removing any stream crossings (site Type A)
# by excluding any cases within 100m of a
# crossing to avoid double counting,
sc2_100 <- sf::st_buffer(sc2, buffer_crossings_m)
sc2_100 <- sc2_100 %>% dplyr::group_by() %>% dplyr::summarise()
sdiff <- suppressWarnings({ sf::st_difference(rint, sf::st_union(sc2_100)) })
# Removing any segments <50m in length
# unless they are near a switch-back
# (determined by manual review of the map),
sdiff$length_m <- sf::st_length(sdiff)
sdiff$length_m <- as.numeric(sdiff$length_m)
skeep <- sdiff[which(sdiff$length_m > small_strm_segment_m), ]
skeep_sb_s1 <- skeep
print(paste0(nrow(skeep_sb_s1), " stream segments for Site Type B - Stratum 1"))
if(nrow(skeep_sb_s1) > 0) {
skeep_sb_s1$site_id <- paste0("B_", 1:nrow(skeep_sb_s1), "_stratum_1")
skeep_sb_s1$strata <- "stratum_1"
skeep_sb_s1$type <- "type_b"
skeep_sb_s1$tmp <- NULL
skeep_sb_s1 <- skeep_sb_s1[, c("site_id", "strata", "type", "length_m")]
}
# Apply buffer - group s1
ssub <- strm[which(strm$tmp_stream_order >= 3), ]
skeep_sb_s2 <- data.frame()
# Only run if stream segments available
if(nrow(ssub) > 0) {
buff <- sf::st_buffer(roads, buffer_s1_m) # 20 m
buff <- buff %>% dplyr::group_by() %>% dplyr::summarise()
# taking the intersection of roads and this buffer,
print("Stratum 2 streams and road buffer...")
rint <- suppressWarnings({ sf::st_intersection(ssub, buff) })
rint <- suppressWarnings({ sf::st_cast(rint, "LINESTRING") })
if(nrow(rint) > 0 ) {
rint$tmp <- "samp"
rint <- rint[, c("tmp")]
# (c) removing any stream crossings (site Type A)
# by excluding any cases within 100m of a
# crossing to avoid double counting
sc2_100 <- sf::st_buffer(sc2, buffer_crossings_m)
sc2_100 <- sc2_100 %>% dplyr::group_by() %>% dplyr::summarise()
sdiff <- suppressWarnings({ sf::st_difference(rint, sf::st_union(sc2_100)) })
# removing any segments <50m in length unless
# they are near a switch-back
# (determined by manual review of the map),
sdiff$length_m <- sf::st_length(sdiff)
sdiff$length_m <- as.numeric(sdiff$length_m)
skeep <- sdiff[which(sdiff$length_m > small_strm_segment_m), ]
skeep_sb_s2 <- skeep
print(paste0(nrow(skeep_sb_s2), " stream segments for Site Type B - Stratum 2"))
if(nrow(skeep_sb_s2) > 0) {
skeep_sb_s2$site_id <- paste0("B_", 1:nrow(skeep_sb_s2), "_stratum_2")
skeep_sb_s2$strata <- "stratum_2"
skeep_sb_s2$type <- "type_b"
skeep_sb_s2$tmp <- NULL
skeep_sb_s2 <- skeep_sb_s2[, c("site_id", "strata", "type", "length_m")]
}
}
}
# Merge together
if(nrow(skeep_sb_s1) == 0 & nrow(skeep_sb_s2) == 0) {
stop("No stream segments remaining - adjust buffer sizes")
}
if(nrow(skeep_sb_s1) == 0 & nrow(skeep_sb_s2) > 0) {
skeep_all <- skeep_sb_s2
}
if(nrow(skeep_sb_s1) > 0 & nrow(skeep_sb_s2) == 0) {
skeep_all <- skeep_sb_s1
}
if(nrow(skeep_sb_s1) > 0 & nrow(skeep_sb_s2) > 0) {
skeep_all <- rbind(skeep_sb_s1, skeep_sb_s2)
}
skeep_all$length_m <- round(skeep_all$length_m, 1)
# Sample by strata
s1 <- skeep_all$site_id[which(skeep_all$strata == "stratum_1")]
if(length(s1) > n) {
s1_samp <- sample(s1, size = n, replace = FALSE)
} else {
s1_samp <- s1
}
s2 <- skeep_all$site_id[which(skeep_all$strata == "stratum_2")]
if(length(s2) > n) {
s2_samp <- sample(s2, size = n, replace = FALSE)
} else {
s2_samp <- s2
}
samp_ids <- c(s1_samp, s2_samp)
# Point sample
ssamp <- skeep_all[which(skeep_all$site_id %in% samp_ids), ]
my_geom <- suppressWarnings({ sf::st_cast(ssamp, "LINESTRING") })
cm <- as.matrix(sf::st_coordinates(my_geom))
cm <- as.data.frame(cm)
first_pt <- cm %>% dplyr::group_by(L1) %>%
dplyr::slice(1)
first_pt <- as.data.frame(first_pt)
first_pt_sf <- sf::st_as_sf(first_pt, coords = c("X", "Y"))
sf::st_crs(first_pt_sf) <- sf::st_crs(strm)$epsg
if(nrow(first_pt_sf) != nrow(ssamp)) {
stop("bad coordinate breakdown...")
}
# Add column names
first_pt_sf$site_id  <- ssamp$site_id
first_pt_sf$strata   <- ssamp$strata
first_pt_sf$type     <- ssamp$type
first_pt_sf$length_m <- ssamp$length_m
first_pt_sf$L1 <- NULL
first_pt_sf <- first_pt_sf[, c("site_id", "strata", "type", "length_m")]
# Add on stream order
int_t <- suppressWarnings({ sf::st_intersection(strm, sf::st_buffer(first_pt_sf[, "site_id"], dist = 10)) })
add_order <- int_t[, c("site_id", stream_order)]
sf::st_geometry(add_order) <- NULL
add_order <- add_order[!(duplicated(add_order)), ]
add_order$stream_order <- as.numeric(add_order[, stream_order])
add_order <- add_order[, c("site_id", "stream_order")]
first_pt_sf_so <- merge(first_pt_sf, add_order,
by.x = "site_id",
by.y = "site_id",
all.x = TRUE,
all.y = FALSE)
# Return sample points and sample lines
ret_obj <- list()
ret_obj$points <- first_pt_sf_so
ret_obj$line_segments <- skeep_all
print(paste0("Total sample sites: ", nrow(skeep_all)))
return(ret_obj)
}
type_b <- road_proximity_sample(
n = 40,
strm = ca_strm,
roads = roads,
buffer_s1_m = 20,
buffer_s2_m = 40,
buffer_crossings_m = 50, # 100m
small_strm_segment_m = 30, # 50m
stream_order = "STREAM_ORDER"
)
# Distances adjusted to provide better fit for urban watershed
head(type_b)
# Get the points object
names(type_b)
site_type_b <- type_b$points
line_segments <- type_b$line_segments
library(mapview)
mapview(list(site_type_b, line_segments))
# ---
# -------------------------------------------
# (Optional) visualize
strm_plot <- sf::st_zm(ca_strm)
road_plot <- sf::st_zm(roads)
plot(sf::st_geometry(strm_plot), col = "darkblue", main = "Site Type B (road proximity)")
plot(sf::st_geometry(road_plot), add = TRUE, col = "burlywood")
plot(sf::st_geometry(site_type_b), add = TRUE, col = ifelse(site_type_b$strata == "stratum_1", "black", "red"), pch = 19)
legend("topright", c("roads", "streams", "stratum 1", "stratum 2"), col = c("burlywood", "darkblue", "black", "red"), lwd = c(1, 1, NA, NA), pch = c(NA, NA, 19, 19))
site_type_c <- strm_crossings_grts(
n = 40,
strm = ca_strm,
roads = roads,
stream_order = 'STREAM_ORDER'
)
site_type_c
# -------------------------------------------
# (Optional) visualize
plot(sf::st_geometry(strm_plot), col = "darkblue", main = "Site Type C (riparian-crossings)")
plot(sf::st_geometry(road_plot), add = TRUE, col = "burlywood")
plot(sf::st_geometry(site_type_c), add = TRUE, col = ifelse(site_type_b$strata == "stratum_1", "black", "red"), pch = 19)
legend("topright", c("roads", "streams", "stratum 1", "stratum 2"), col = c("burlywood", "darkblue", "black", "red"), lwd = c(1, 1, NA, NA), pch = c(NA, NA, 19, 19))
output_dir <- "C:/Users/mbayly/Desktop/delete/my_sites"
if(!(dir.exists(output_dir))) {
stop("Could not find output directory")
}
substrRight <- function(x, n) {
substr(x, nchar(x)-n+1, nchar(x))
}
last_char <- substrRight(output_dir, 1)
if(last_char != "/") {
output_dir <- paste0(output_dir, "/")
}
site_type_a
site_type_a$length_m <- NA
sta <- site_type_a[, c("site_id", "strata", "type", "length_m", "stream_order")]
stb <- type_b$points
stb <- stb[, c("site_id", "strata", "type", "length_m", "stream_order")]
head(stb)
stc <- site_type_c
stc <- stc[, c("site_id", "strata", "type", "length_m", "stream_order")]
head(stc)
rename_geometry <- function(g, name) {
current = attr(g, "sf_column")
names(g)[names(g)==current] = name
sf::st_geometry(g)=name
g
}
rename_geometry <- function(g, name) {
current = attr(g, "sf_column")
names(g)[names(g)==current] = name
sf::st_geometry(g)=name
return(g)
}
sta <- rename_geometry(sta, "geomf")
stb <- rename_geometry(stb, "geomf")
stc <- rename_geometry(stc, "geomf")
if(nrow(stb) > 0) {
allsites <- rbind(sta, stb)
} else {
allsites <- sta
}
if(nrow(stc) > 0) {
allsites <- rbind(allsites, stc)
}
allsites <- suppressWarnings({ sf::st_cast(allsites, "POINT") })
allsites <- allsites[!(duplicated(allsites$site_id)), ]
# Get utm and lat long coordinates
cutm <- sf::st_coordinates(allsites)
cutm <- as.matrix(cutm)
cutm <- as.data.frame(cutm)
allsites_ll <- sf::st_transform(allsites, 4326)
cll <- sf::st_coordinates(allsites_ll)
cll <- as.matrix(cll)
cll <- as.data.frame(cll)
asd <- allsites
sf::st_geometry(asd) <- NULL
epsg <- sf::st_crs(allsites)$epsg
utm_zone <- substrRight(epsg, 2)
asd$utm_zone <- utm_zone
asd$easting <- cutm$X
asd$northing <- cutm$Y
asd$latitude <- cll$Y
asd$longitude <- cll$X
utils::write.csv(asd, file = paste0(output_dir, "sites.csv"), na = "NA", row.names = FALSE)
asd <- asd[order(asd$type, asd$strata), ]
unique(asd$type)
seperate_files
seperate_files = TRUE
if(seperate_files) {
asd_a <- asd[which(asd$type == "type_a"), ]
utils::write.csv(asd_a, file = paste0(output_dir, "sites_type_a.csv"), na = "", row.names = FALSE)
asd_b <- asd[which(asd$type == "type_b"), ]
utils::write.csv(asd_b, file = paste0(output_dir, "sites_type_b.csv"), na = "", row.names = FALSE)
asd_c <- asd[which(asd$type == "type_c"), ]
utils::write.csv(asd_c, file = paste0(output_dir, "sites_type_c.csv"), na = "", row.names = FALSE)
} else {
utils::write.csv(asd, file = paste0(output_dir, "sites.csv"), na = "", row.names = FALSE)
}
head(sites)
sites <- allsites_ll
segments <- type_b$line_segments
segments <- suppressWarnings({ sf::st_cast(segments, "LINESTRING") })
segments <- sf::st_transform(segments, 4326)
head(sites)
#' @title Export Sites
#'
#' @description
#' Export sampling sites for field programs
#'
#' @details
#' Define an output directory to export field sampling sites. Choose from available output formats. Note that when exporting to KML and SHP file format the data will be re-projected to latitude/longitude (EPSG: 4326).
#'
#' @param output_dir String. Local file path the an output directory on your computer.
#' @param site_type_a Sample Sites Type A. sf data frame returned from `grouped_random_sample()`
#' @param type_b Sample Sites of Type B and line segments. Object returned from `road_proximity_sample()`.
#' @param site_type_c Sample Sites Type C. sf data frame returned from `strm_crossings_grts()`
#' @param export_csv Boolean. Should a csv file be exported to the output directory.
#' @param export_shp Boolean. Should a shp (shape file) file be exported to the output directory.
#' @param export_kml Boolean. Should a kml file be exported to the output directory.
#' @param seperate_files Boolean. Should seperate files be created for each site type.
#'
#' @return
#' Populates the export directory with output files
#'
#'
#'
#' @export
export_sites <- function(output_dir = NA,
site_type_a = NA,
type_b = NA,
site_type_c = NA,
export_csv = TRUE,
export_shp = TRUE,
export_kml = TRUE,
seperate_files = TRUE) {
if(!(dir.exists(output_dir))) {
stop("Could not find output directory")
}
substrRight <- function(x, n) {
substr(x, nchar(x)-n+1, nchar(x))
}
last_char <- substrRight(output_dir, 1)
if(last_char != "/") {
output_dir <- paste0(output_dir, "/")
}
site_type_a$length_m <- NA
sta <- site_type_a[, c("site_id", "strata", "type", "length_m", "stream_order")]
stb <- type_b$points
stb <- stb[, c("site_id", "strata", "type", "length_m", "stream_order")]
stc <- site_type_c
stc <- stc[, c("site_id", "strata", "type", "length_m", "stream_order")]
rename_geometry <- function(g, name) {
current = attr(g, "sf_column")
names(g)[names(g)==current] = name
sf::st_geometry(g)=name
return(g)
}
sta <- rename_geometry(sta, "geomf")
stb <- rename_geometry(stb, "geomf")
stc <- rename_geometry(stc, "geomf")
if(nrow(stb) > 0) {
allsites <- rbind(sta, stb)
} else {
allsites <- sta
}
if(nrow(stc) > 0) {
allsites <- rbind(allsites, stc)
}
allsites <- suppressWarnings({ sf::st_cast(allsites, "POINT") })
allsites <- allsites[!(duplicated(allsites$site_id)), ]
# Get utm and lat long coordinates
cutm <- sf::st_coordinates(allsites)
cutm <- as.matrix(cutm)
cutm <- as.data.frame(cutm)
allsites_ll <- sf::st_transform(allsites, 4326)
cll <- sf::st_coordinates(allsites_ll)
cll <- as.matrix(cll)
cll <- as.data.frame(cll)
asd <- allsites
sf::st_geometry(asd) <- NULL
epsg <- sf::st_crs(allsites)$epsg
utm_zone <- substrRight(epsg, 2)
asd$utm_zone <- utm_zone
asd$easting <- cutm$X
asd$northing <- cutm$Y
asd$latitude <- cll$Y
asd$longitude <- cll$X
asd <- asd[order(asd$type, asd$strata), ]
if(export_csv) {
if(seperate_files) {
asd_a <- asd[which(asd$type == "type_a"), ]
utils::write.csv(asd_a, file = paste0(output_dir, "sites_type_a.csv"), na = "", row.names = FALSE)
asd_b <- asd[which(asd$type == "type_b"), ]
utils::write.csv(asd_b, file = paste0(output_dir, "sites_type_b.csv"), na = "", row.names = FALSE)
asd_c <- asd[which(asd$type == "type_c"), ]
utils::write.csv(asd_c, file = paste0(output_dir, "sites_type_c.csv"), na = "", row.names = FALSE)
} else {
utils::write.csv(asd, file = paste0(output_dir, "sites.csv"), na = "", row.names = FALSE)
}
}
sites <- allsites_ll
segments <- type_b$line_segments
segments <- suppressWarnings({ sf::st_cast(segments, "LINESTRING") })
segments <- sf::st_transform(segments, 4326)
if(export_shp) {
if(seperate_files) {
sites_a <- sites[which(sites$type == "type_a"), ]
suppressWarnings({ sf::st_write(sites_a, dsn = paste0(output_dir, "sites_type_a.shp"), delete_dsn = TRUE) })
sites_b <- sites[which(sites$type == "type_b"), ]
suppressWarnings({ sf::st_write(sites_b, dsn = paste0(output_dir, "sites_type_b.shp"), delete_dsn = TRUE) })
sites_c <- sites[which(sites$type == "type_c"), ]
suppressWarnings({ sf::st_write(sites_c, dsn = paste0(output_dir, "sites_type_c.shp"), delete_dsn = TRUE) })
} else {
suppressWarnings({ sf::st_write(sites, dsn = paste0(output_dir, "sites.shp"), delete_dsn = TRUE) })
}
suppressWarnings({ sf::st_write(segments, dsn = paste0(output_dir, "segments.shp"), delete_dsn = TRUE) })
}
if(export_kml) {
if(seperate_files) {
sites_a <- sites[which(sites$type == "type_a"), ]
suppressWarnings({ sf::st_write(sites_a, dsn = paste0(output_dir, "sites_type_a.kml"), delete_dsn = TRUE) })
sites_b <- sites[which(sites$type == "type_b"), ]
suppressWarnings({ sf::st_write(sites_b, dsn = paste0(output_dir, "sites_type_b.kml"), delete_dsn = TRUE) })
sites_c <- sites[which(sites$type == "type_c"), ]
suppressWarnings({ sf::st_write(sites_c, dsn = paste0(output_dir, "sites_type_c.kml"), delete_dsn = TRUE) })
} else {
suppressWarnings({ sf::st_write(sites, dsn = paste0(output_dir, "sites.kml"), delete_dsn = TRUE) })
}
suppressWarnings({ sf::st_write(segments, dsn = paste0(output_dir, "segments.kml"), delete_dsn = TRUE) })
}
}
export_sites(output_dir = output_dir,
site_type_a = site_type_a,
type_b = type_b,
site_type_c = site_type_c,
export_csv = TRUE,
export_shp = TRUE,
export_kml = TRUE)
remove.packages("wsep.t2")
remove.packages("wsep.t2")
rm(list = ls())
library(devtools)
rm(list = ls())
devtools::load_all()
devtools::document()
?constrain_streams
devtools::test()  #
devtools::check() # Operating system test
getwd()
getwd()
rm(list = ls())
rm(list = ls())
library(devtools)
rm(list = ls())
devtools::load_all()
devtools::document()
?constrain_streams
devtools::test()  # Run tests
devtools::check() # Operating system test
