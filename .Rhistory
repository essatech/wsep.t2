road_plot <- sf::st_zm(roads)
plot(sf::st_geometry(strm_plot), col = "darkblue", main = "Site Type B (road proximity)")
plot(sf::st_geometry(road_plot), add = TRUE, col = "burlywood")
plot(sf::st_geometry(site_type_b), add = TRUE, col = ifelse(site_type_a$strata == "stratum_1", "black", "red"), pch = 19)
legend("topright",
c("roads", "streams", "stratum 1", "stratum 2"),
col = c("burlywood", "darkblue", "black", "red"),
lwd = c(1, 1, NA, NA),
pch = c(NA, NA, 19, 19))
site_type_c <- strm_grts(n = 20, strm = ca_strm, roads = roads, stream_order = 'STREAM_ORDER')
plot(sf::st_geometry(strm_plot), col = "darkblue", main = "Site Type C (riparian-crossings)")
site_type_c <- strm_grts(n = 20, strm = ca_strm, roads = roads, stream_order = 'STREAM_ORDER')
site_type_c <- strm_grts(n = 20, strm = ca_strm, stream_order = 'STREAM_ORDER')
site_type_c
n = 20
strm = ca_strm
stream_order = 'STREAM_ORDER'
# Add/fix stream order column
# Fix stream order column name
if(!(stream_order %in% colnames(strm))) {
stop(paste0("Could not find a column named ", stream_order, ". Check stream_order argument"))
}
vals <- strm[, stream_order]
sf::st_geometry(vals) <- NULL
vals <- vals[, 1]
vals <- as.numeric(vals)
strm$tmp_stream_order <- vals
strm
sc2 <- sf::st_zm(strm)
# Cant sample more than available
if(nrow(sc2) < n) {
n <- nrow(sc2)
}
?grts
sc2
grts
# Generate GRTS sample
grts <- spsurvey::grts(
sframe = sc2,
n_base = n
)
grts
my_sample <- grts$sites_base
my_sample
site_type_c <- strm_grts(n = 20, strm = ca_strm, stream_order = 'STREAM_ORDER')
plot(sf::st_geometry(strm_plot), col = "darkblue", main = "Site Type C (riparian-crossings)")
plot(sf::st_geometry(road_plot), add = TRUE, col = "burlywood")
plot(sf::st_geometry(site_type_c), add = TRUE, col = ifelse(site_type_b$strata == "stratum_1", "black", "red"), pch = 19)
legend("topright", c("roads", "streams", "stratum 1", "stratum 2"), col = c("burlywood", "darkblue", "black", "red"), lwd = c(1, 1, NA, NA), pch = c(NA, NA, 19, 19))
# Run tests
testthat::expect_true(nrow(site_type_a) > 0)
testthat::expect_true(all(names(type_b) == c("points", "line_segments")))
testthat::expect_true(nrow(site_type_c) > 0)
remove.packages("wsep.t2")
remove.packages("wsep.t2")
remove.packages("wsep.t2")
remove.packages("wsep.t2")
rm(list = ls())
devtools::load_all()
devtools::document()
?constrain_streams
devtools::test()  # Run tests
devtools::check() # Operating system test
library(wsep.t2)
data(TsolumStreams)
strm <- utm_projection(data = TsolumStreams)
sf::st_crs(strm)$epsg
# Get length of first order tribs before
strm$length_m <- sf::st_length(strm)
sum1 <- as.numeric(sum(strm$length_m))
# Then run constrain
cs <- constrain_streams(strm = strm,
length_remove = 500,
length_trim = 200)
# Check format is ok
testthat::expect_true(class(cs)[1] == "sf")
testthat::expect_true(class(cs)[2] == "data.frame")
tsum <- table(sf::st_geometry_type(cs))
tsum <- tsum[which(tsum > 0)]
names(tsum)
testthat::expect_true(names(tsum) == "LINESTRING")
cs$length_m <- sf::st_length(cs)
sum2 <- as.numeric(sum(cs$length_m))
# After constrain we should have shorter segments
testthat::expect_true(sum1 > sum2)
# Then run constrain again - should be even smaller
cs3 <- constrain_streams(strm = strm,
length_remove = 3000,
length_trim = 1500)
cs3$length_m <- sf::st_length(cs3)
sum3 <- as.numeric(sum(cs3$length_m))
testthat::expect_true(sum2 > sum3)
# Try parsing down original dataset randomly
strm_sub <- strm[sample(nrow(strm), 200), ]
# then see if constrain still works
cs4 <- constrain_streams(strm = strm_sub)
plot(st_geometry(cs4))
plot(sf::st_geometry(cs4))
# plot(sf::st_geometry(cs4))
cs4$length_m <- sf::st_length(cs4)
sum4 <- as.numeric(sum(cs4$length_m))
testthat::expect_true(sum3 > sum4)
library(wsep.t2)
data(TsolumStreams)
strm <- utm_projection(data = TsolumStreams)
sf::st_crs(strm)$epsg
# Get length of first order tribs before
strm$length_m <- sf::st_length(strm)
sum1 <- as.numeric(sum(strm$length_m))
# Then run constrain
cs <- constrain_streams(strm = strm,
length_remove = 500,
length_trim = 200)
# cs <- st_zm(cs)
# strm <- st_zm(strm)
# mapview::mapview(list(cs, strm))
# Check format is ok
testthat::expect_true(class(cs)[1] == "sf")
testthat::expect_true(class(cs)[2] == "data.frame")
tsum <- table(sf::st_geometry_type(cs))
tsum <- tsum[which(tsum > 0)]
names(tsum)
testthat::expect_true(names(tsum) == "LINESTRING")
cs$length_m <- sf::st_length(cs)
sum2 <- as.numeric(sum(cs$length_m))
# After constrain we should have shorter segments
testthat::expect_true(sum1 > sum2)
# Then run constrain again - should be even smaller
cs3 <- constrain_streams(strm = strm,
length_remove = 3000,
length_trim = 1500)
cs3$length_m <- sf::st_length(cs3)
sum3 <- as.numeric(sum(cs3$length_m))
testthat::expect_true(sum2 > sum3)
# Try parsing down original dataset randomly
strm_sub <- strm[sample(nrow(strm), 200), ]
# then see if constrain s
# Try parsing down original dataset randomly
strm_sub <- strm[1:200, ]
# then see if constrain still works
cs4 <- constrain_streams(strm = strm_sub)
#----------------------------------------------------
# Build and Tests
#----------------------------------------------------
library(devtools)
rm(list = ls())
devtools::load_all()
devtools::document()
?constrain_streams
devtools::check() # Operating system test
# You may need to install remotes
library(remotes)
# Choose all if promp to update packages
remotes::install_github("essatech/wsep.t2")
library(wsep.t2)
library(wsep.t2)
rm(list = ls())
remove.packages("wsep.t2")
remove.packages("wsep.t2")
install.packages(getwd(), repos = NULL, type = "source", dependencies = "Imports")
# Run with sample dataset
library(wsep.t2)
data(TsolumStreams)
strm <- TsolumStreams
data(TsolumRoads)
roads <- TsolumRoads
# Load the WSEP Tier 2 R-package
library(wsep.t2)
# Will must re-project our data so that x,y are cartesian coordinates with units of meters
strm <- utm_projection(data = strm)
# Then constrain the sampling frame to remove 1st order tribs less than 500 m in length and clip the upper 200 m off of other tributaries. see ?constrain_streams for details
c_ctrm <- constrain_streams(strm = strm,
length_remove = 500,
length_trim = 200)
# Remove lakes and other lotic reaches.
# Consider removing any other lakes manually or through a simple filter
c_strm <- remove_lentic_bcfwa(strm = c_ctrm,
EDGE_TYPE = "EDGE_TYPE")
# Remove alpine areas
# In this example set to all segments over 800 m (adjust this value for your region)
ca_strm <- remove_alpine_bcfwa(strm = c_strm,
elevation_threshold = 800)
# (Optional) Visualize original (raw) and constrained streams.
# Finalize and adjust with any additional filters
strm1_plot <- sf::st_zm(strm)
strm2_plot <- sf::st_zm(ca_strm)
plot(sf::st_geometry(strm1_plot), col = "lightgrey",
main = "Constrained Streams")
plot(sf::st_geometry(strm2_plot), col = "blue", add = TRUE)
legend("topright", c("original", "adjusted"),
col = c("lightgrey", "blue"), lwd = 1)
ca_strm$strata <- NA
ca_strm$strata <- ifelse(ca_strm$STREAM_ORDER < 3, "stratum_1", ca_strm$strata)
ca_strm$strata <- ifelse(ca_strm$STREAM_ORDER >= 3, "stratum_2", ca_strm$strata)
plot(ca_strm["strata"], main = "Sampling Stratum")
# Ensure road spatial projection matches that of the stream layer
# and that units are in meters (cartesian coordinates)
roads <- utm_projection(data = roads)
# Define crossings as the intersection of streams and roads
crossings <- sf::st_intersection(ca_strm, roads)
# Take a random sample of crossings by strata
site_type_a <- grouped_random_sample(data = crossings,
group_name = "strata",
n = 40,
stream_order = "STREAM_ORDER"
)
# -------------------------------------------
# (Optional) visualize
strm_plot <- sf::st_zm(ca_strm)
road_plot <- sf::st_zm(roads)
plot(sf::st_geometry(strm_plot), col = "darkblue", main = "Site Type A (stream crossing)")
plot(sf::st_geometry(road_plot), add = TRUE, col = "burlywood")
plot(sf::st_geometry(site_type_a), add = TRUE, col = ifelse(site_type_a$strata == "stratum_1", "black", "red"), pch = 19)
legend("topright", c("roads", "streams", "stratum 1", "stratum 2"), col = c("burlywood", "darkblue", "black", "red"), lwd = c(1, 1, NA, NA), pch = c(NA, NA, 19, 19))
# Run the function for road proximity samples
?road_proximity_sample
type_b <- road_proximity_sample(
n = 60,
strm = ca_strm,
roads = roads,
buffer_s1_m = 20,
buffer_s2_m = 40,
buffer_crossings_m = 50, # originally 100m
small_strm_segment_m = 30, # originally 50m
stream_order = "STREAM_ORDER"
)
# Get the points object
names(type_b)
site_type_b <- type_b$points
line_segments <- type_b$line_segments
table(site_type_b$strata)
library(mapview)
# mapview(list(site_t
# -------------------------------------------
# (Optional) visualize
strm_plot <- sf::st_zm(ca_strm)
road_plot <- sf::st_zm(roads)
plot(sf::st_geometry(strm_plot), col = "darkblue", main = "Site Type B (road proximity)")
plot(sf::st_geometry(road_plot), add = TRUE, col = "burlywood")
plot(sf::st_geometry(site_type_b), add = TRUE, col = ifelse(site_type_b$strata == "stratum_1", "black", "red"), pch = 19)
legend("topright", c("roads", "streams", "stratum 1", "stratum 2"), col = c("burlywood", "darkblue", "black", "red"), lwd = c(1, 1, NA, NA), pch = c(NA, NA, 19, 19))
plot(st_geometry(line_segments))
plot(sf::st_geometry(line_segments))
# -------------------------------------------
# (Optional) visualize
strm_plot <- sf::st_zm(ca_strm)
road_plot <- sf::st_zm(roads)
plot(sf::st_geometry(strm_plot), col = "darkblue", main = "Site Type B (road proximity)")
plot(sf::st_geometry(road_plot), add = TRUE, col = "burlywood")
plot(sf::st_geometry(site_type_b), add = TRUE, col = ifelse(site_type_b$strata == "stratum_1", "black", "red"), pch = 19)
legend("topright", c("roads", "streams", "stratum 1", "stratum 2"), col = c("burlywood", "darkblue", "black", "red"), lwd = c(1, 1, NA, NA), pch = c(NA, NA, 19, 19))
line_segments
plot(sf::st_geometry(line_segments), add = TRUE, col = ifelse(site_type_b$strata == "stratum_1", "black", "red"), lwd = 2)
# -------------------------------------------
# (Optional) visualize
strm_plot <- sf::st_zm(ca_strm)
road_plot <- sf::st_zm(roads)
plot(sf::st_geometry(strm_plot), col = "darkblue", main = "Site Type B (road proximity)")
plot(sf::st_geometry(road_plot), add = TRUE, col = "burlywood")
plot(sf::st_geometry(site_type_b), add = TRUE, col = ifelse(site_type_b$strata == "stratum_1", "black", "red"), pch = 19, cex = 0.5)
plot(sf::st_geometry(line_segments), add = TRUE, col = ifelse(site_type_b$strata == "stratum_1", "black", "red"), lwd = 2)
plot(sf::st_geometry(line_segments), add = TRUE, col = ifelse(site_type_b$strata == "stratum_1", "black", "red"), lwd = 4)
plot(sf::st_geometry(line_segments), add = TRUE, col = ifelse(site_type_b$strata == "stratum_1", "black", "red"), lwd = 3)
line_segments
line_segments_b <- type_b$line_segments
line_segments_a <- type_a$line_segments
type_b
table(type_b$line_segments$strata)
line_segments <- type_b$line_segments
line_segments
line_segments_b
plot(sf::st_geometry(line_segments), add = TRUE, col = ifelse(site_type_b$strata == "stratum_1", "black", "red"), lwd = 3)
strm_plot <- sf::st_zm(ca_strm)
road_plot <- sf::st_zm(roads)
plot(sf::st_geometry(strm_plot), col = "darkblue", main = "Site Type B (road proximity)")
plot(sf::st_geometry(road_plot), add = TRUE, col = "burlywood")
plot(sf::st_geometry(site_type_b), add = TRUE, col = ifelse(site_type_b$strata == "stratum_1", "black", "red"), pch = 19, cex = 0.5)
plot(sf::st_geometry(line_segments), add = TRUE, col = ifelse(site_type_b$strata == "stratum_1", "black", "red"), lwd = 2)
legend("topright", c("roads", "streams", "stratum 1", "stratum 2"), col = c("burlywood", "darkblue", "black", "red"), lwd = c(1, 1, NA, NA), pch = c(NA, NA, 19, 19))
?legend
mapview()
mapview(line_segments)
# -------------------------------------------
# (Optional) visualize
strm_plot <- sf::st_zm(ca_strm[1:50, ])
road_plot <- sf::st_zm(roads)
plot(sf::st_geometry(strm_plot), col = "darkblue", main = "Site Type B (road proximity)")
plot(sf::st_geometry(road_plot), add = TRUE, col = "burlywood")
plot(sf::st_geometry(site_type_b), add = TRUE, col = ifelse(site_type_b$strata == "stratum_1", "black", "red"), pch = 19, cex = 0.5)
plot(sf::st_geometry(line_segments), add = TRUE, col = ifelse(site_type_b$strata == "stratum_1", "black", "red"), lwd = 2)
legend("topright", c("roads", "streams", "stratum 1", "stratum 2"), col = c("burlywood", "darkblue", "black", "red"), lwd = c(1, 1, NA, NA), pch = c(NA, NA, 19, 19))
# -------------------------------------------
# (Optional) visualize
strm_plot <- sf::st_zm(ca_strm)
road_plot <- sf::st_zm(roads)
plot(sf::st_geometry(strm_plot), col = "darkblue", main = "Site Type B (road proximity)")
plot(sf::st_geometry(road_plot), add = TRUE, col = "burlywood")
plot(sf::st_geometry(site_type_b), add = TRUE, col = ifelse(site_type_b$strata == "stratum_1", "black", "red"), pch = 19, cex = 0.5)
plot(sf::st_geometry(line_segments), add = TRUE, col = ifelse(site_type_b$strata == "stratum_1", "black", "red"), lwd = 2)
legend("topright", c("roads", "streams", "stratum 1", "stratum 2"), col = c("burlywood", "darkblue", "black", "red"), lwd = c(1, 1, NA, NA), pch = c(NA, NA, 19, 19))
legend("topright", c("roads", "streams", "stratum 1", "stratum 2"), col = c("burlywood", "darkblue", "black", "red"), lwd = c(1, 1, 1, NA), pch = c(NA, NA, 19, 19))
legend("topright", c("roads", "streams", "stratum 1", "stratum 2"), col = c("burlywood", "darkblue", "black", "red"), lwd = c(1, 1, 2, 2), pch = c(NA, NA, 19, 19))
# -------------------------------------------
# (Optional) visualize
strm_plot <- sf::st_zm(ca_strm)
road_plot <- sf::st_zm(roads)
plot(sf::st_geometry(strm_plot), col = "darkblue", main = "Site Type B (road proximity)")
plot(sf::st_geometry(road_plot), add = TRUE, col = "burlywood")
plot(sf::st_geometry(site_type_b), add = TRUE, col = ifelse(site_type_b$strata == "stratum_1", "black", "red"), pch = 19, cex = 0.5)
plot(sf::st_geometry(line_segments), add = TRUE, col = ifelse(site_type_b$strata == "stratum_1", "black", "red"), lwd = 2)
legend("topright", c("roads", "streams", "stratum 1", "stratum 2"), col = c("burlywood", "darkblue", "black", "red"), lwd = c(1, 1, 2, 2), pch = c(NA, NA, 19, 19))
# -------------------------------------------
# (Optional) visualize
strm_plot <- sf::st_zm(ca_strm)
road_plot <- sf::st_zm(roads)
plot(sf::st_geometry(strm_plot), col = "darkblue", main = "Site Type B (road proximity)")
plot(sf::st_geometry(road_plot), add = TRUE, col = "burlywood")
plot(sf::st_geometry(site_type_b), add = TRUE, col = ifelse(site_type_b$strata == "stratum_1", "black", "red"), pch = 19, cex = 0.5)
plot(sf::st_geometry(line_segments), add = TRUE, col = ifelse(site_type_b$strata == "stratum_1", "black", "red"), lwd = 2.5)
legend("topright", c("roads", "streams", "stratum 1", "stratum 2"), col = c("burlywood", "darkblue", "black", "red"), lwd = c(1, 1, 2, 2), pch = c(NA, NA, 19, 19))
site_type_c_1 <- strm_grts(
n = 40,
strm = ca_strm[which(ca_strm$strata == "stratum_1"), ],
roads = roads,
stream_order = 'STREAM_ORDER'
)
site_type_c_1 <- strm_grts(
n = 40,
strm = ca_strm[which(ca_strm$strata == "stratum_1"), ],
stream_order = 'STREAM_ORDER'
)
site_type_c_2 <- strm_grts(
n = 40,
strm = ca_strm[which(ca_strm$strata == "stratum_2"), ],
roads = roads,
stream_order = 'STREAM_ORDER'
)
site_type_c_2 <- strm_grts(
n = 40,
strm = ca_strm[which(ca_strm$strata == "stratum_2"), ],
stream_order = 'STREAM_ORDER'
)
site_type_c <- rbind(site_type_c_1, site_type_c_2)
table(site_type_c$strata)
# -------------------------------------------
# (Optional) visualize
plot(sf::st_geometry(strm_plot), col = "darkblue", main = "Site Type C (riparian-crossings)")
plot(sf::st_geometry(road_plot), add = TRUE, col = "burlywood")
plot(sf::st_geometry(site_type_c), add = TRUE, col = ifelse(site_type_b$strata == "stratum_1", "black", "red"), pch = 19)
legend("topright", c("roads", "streams", "stratum 1", "stratum 2"), col = c("burlywood", "darkblue", "black", "red"), lwd = c(1, 1, NA, NA), pch = c(NA, NA, 19, 19))
# -------------------------------------------
# (Optional) visualize
plot(sf::st_geometry(strm_plot), col = "darkblue", main = "Site Type C (riparian)")
plot(sf::st_geometry(road_plot), add = TRUE, col = "burlywood")
plot(sf::st_geometry(site_type_c), add = TRUE, col = ifelse(site_type_b$strata == "stratum_1", "black", "red"), pch = 19)
legend("topright", c("roads", "streams", "stratum 1", "stratum 2"), col = c("burlywood", "darkblue", "black", "red"), lwd = c(1, 1, NA, NA), pch = c(NA, NA, 19, 19))
# Output directory
# Change this path for your computer!
output_dir <- "C:/Users/mbayly/Desktop/delete/my_sites"
export_sites(output_dir = output_dir,
site_type_a = site_type_a,
type_b = type_b,
site_type_c = site_type_c,
export_csv = TRUE,
export_shp = TRUE,
export_kml = TRUE)
# Output directory
# Change this path for your computer!
output_dir <- "C:/Users/mbayly/Desktop/delete/my_sites"
# Output directory
# Change this path for your computer!
output_dir <- "C:/Users/mbayly/Desktop/delete/my_sites"
export_sites(output_dir = output_dir,
site_type_a = site_type_a,
type_b = type_b,
site_type_c = site_type_c,
export_csv = TRUE,
export_shp = TRUE,
export_kml = TRUE)
# Generate a summary of the sampling frame by strata
# For stream lengths
df1 <- sample_frame_summary(
strm = strm,
constrained_strm = ca_strm,
roads = roads,
stream_order = "STREAM_ORDER",
summary_type = "stream_lengths")
print(df1)
# and stream crossings
df2 <- sample_frame_summary(
strm = strm,
constrained_strm = ca_strm,
roads = roads,
stream_order = "STREAM_ORDER",
summary_type = "stream_crossings")
print(df2)
rm(list = ls())
devtools::load_all()
devtools::document()
?constrain_streams
# You may need to install remotes
library(remotes)
# Choose all if promp to update packages
remotes::install_github("essatech/wsep.t2")
# Run with sample dataset
library(wsep.t2)
data(TsolumStreams)
strm <- TsolumStreams
data(TsolumRoads)
roads <- TsolumRoads
# Load the WSEP Tier 2 R-package
library(wsep.t2)
# Will must re-project our data so that x,y are cartesian coordinates with units of meters
strm <- utm_projection(data = strm)
# Then constrain the sampling frame to remove 1st order tribs less than 500 m in length and clip the upper 200 m off of other tributaries. see ?constrain_streams for details
c_ctrm <- constrain_streams(strm = strm,
length_remove = 500,
length_trim = 200)
# Remove lakes and other lotic reaches.
# Consider removing any other lakes manually or through a simple filter
c_strm <- remove_lentic_bcfwa(strm = c_ctrm,
EDGE_TYPE = "EDGE_TYPE")
# Remove alpine areas
# In this example set to all segments over 800 m (adjust this value for your region)
ca_strm <- remove_alpine_bcfwa(strm = c_strm,
elevation_threshold = 800)
# (Optional) Visualize original (raw) and constrained streams.
# Finalize and adjust with any additional filters
strm1_plot <- sf::st_zm(strm)
strm2_plot <- sf::st_zm(ca_strm)
plot(sf::st_geometry(strm1_plot), col = "lightgrey",
main = "Constrained Streams")
plot(sf::st_geometry(strm2_plot), col = "blue", add = TRUE)
legend("topright", c("original", "adjusted"),
col = c("lightgrey", "blue"), lwd = 1)
ca_strm$strata <- NA
ca_strm$strata <- ifelse(ca_strm$STREAM_ORDER < 3, "stratum_1", ca_strm$strata)
ca_strm$strata <- ifelse(ca_strm$STREAM_ORDER >= 3, "stratum_2", ca_strm$strata)
plot(ca_strm["strata"], main = "Sampling Stratum")
# Ensure road spatial projection matches that of the stream layer
# and that units are in meters (cartesian coordinates)
roads <- utm_projection(data = roads)
# Define crossings as the intersection of streams and roads
crossings <- sf::st_intersection(ca_strm, roads)
# Take a random sample of crossings by strata
site_type_a <- grouped_random_sample(data = crossings,
group_name = "strata",
n = 40,
stream_order = "STREAM_ORDER"
)
# -------------------------------------------
# (Optional) visualize
strm_plot <- sf::st_zm(ca_strm)
road_plot <- sf::st_zm(roads)
plot(sf::st_geometry(strm_plot), col = "darkblue", main = "Site Type A (stream crossing)")
plot(sf::st_geometry(road_plot), add = TRUE, col = "burlywood")
plot(sf::st_geometry(site_type_a), add = TRUE, col = ifelse(site_type_a$strata == "stratum_1", "black", "red"), pch = 19)
legend("topright", c("roads", "streams", "stratum 1", "stratum 2"), col = c("burlywood", "darkblue", "black", "red"), lwd = c(1, 1, NA, NA), pch = c(NA, NA, 19, 19))
# Run the function for road proximity samples
?road_proximity_sample
type_b <- road_proximity_sample(
n = 60,
strm = ca_strm,
roads = roads,
buffer_s1_m = 20,
buffer_s2_m = 40,
buffer_crossings_m = 50, # originally 100m
small_strm_segment_m = 30, # originally 50m
stream_order = "STREAM_ORDER"
)
# Get the points object
names(type_b)
site_type_b <- type_b$points
line_segments <- type_b$line_segments
table(site_type_b$strata)
# -------------------------------------------
# (Optional) visualize
strm_plot <- sf::st_zm(ca_strm)
road_plot <- sf::st_zm(roads)
plot(sf::st_geometry(strm_plot), col = "darkblue", main = "Site Type B (road proximity)")
plot(sf::st_geometry(road_plot), add = TRUE, col = "burlywood")
plot(sf::st_geometry(site_type_b), add = TRUE, col = ifelse(site_type_b$strata == "stratum_1", "black", "red"), pch = 19, cex = 0.5)
plot(sf::st_geometry(line_segments), add = TRUE, col = ifelse(site_type_b$strata == "stratum_1", "black", "red"), lwd = 2.5)
legend("topright", c("roads", "streams", "stratum 1", "stratum 2"), col = c("burlywood", "darkblue", "black", "red"), lwd = c(1, 1, 2, 2), pch = c(NA, NA, 19, 19))
site_type_c_1 <- strm_grts(
n = 40,
strm = ca_strm[which(ca_strm$strata == "stratum_1"), ],
stream_order = 'STREAM_ORDER'
)
site_type_c_2 <- strm_grts(
n = 40,
strm = ca_strm[which(ca_strm$strata == "stratum_2"), ],
stream_order = 'STREAM_ORDER'
)
site_type_c <- rbind(site_type_c_1, site_type_c_2)
table(site_type_c$strata)
# -------------------------------------------
# (Optional) visualize
plot(sf::st_geometry(strm_plot), col = "darkblue", main = "Site Type C (riparian)")
plot(sf::st_geometry(road_plot), add = TRUE, col = "burlywood")
plot(sf::st_geometry(site_type_c), add = TRUE, col = ifelse(site_type_b$strata == "stratum_1", "black", "red"), pch = 19)
legend("topright", c("roads", "streams", "stratum 1", "stratum 2"), col = c("burlywood", "darkblue", "black", "red"), lwd = c(1, 1, NA, NA), pch = c(NA, NA, 19, 19))
# Output directory
# Change this path for your computer!
output_dir <- "C:/Users/mbayly/Desktop/delete/my_sites"
export_sites(output_dir = output_dir,
site_type_a = site_type_a,
type_b = type_b,
site_type_c = site_type_c,
export_csv = TRUE,
export_shp = TRUE,
export_kml = TRUE)
