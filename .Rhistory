vals <- vals[, 1]
data$tmp_group_name <- vals
data$tmp_id <- 1:nrow(data)
# Split by each stratum and then sample without replacement
stdf <- data %>% dplyr::group_by(tmp_group_name) %>%
dplyr::slice_sample(n = n, replace = TRUE)
site_types <- data[which(data$tmp_id %in% unique(stdf$tmp_id)), ]
site_types <- site_types[which(!(duplicated(site_types$tmp_id))), ]
site_types$tmp_id <- NULL
site_types <- sf::st_zm(site_types)
# Sort by strata
site_types <- site_types[order(site_types$tmp_stream_order), ]
# Make unique name
site_types$site_id <- paste0("A_", 1:nrow(site_types),
"_", site_types$tmp_group_name)
table(site_types$strata)
head(site_types$site_id, 10)
head(site_types$STREAM_ORDER, 10)
tail(site_types$STREAM_ORDER, 10)
# Fix stream order column name
if(!(stream_order %in% colnames(data))) {
stop(paste0("Could not find a column named ", stream_order, ". Check stream_order argument"))
}
vals <- data[, stream_order]
sf::st_geometry(vals) <- NULL
vals <- vals[, 1]
vals <- as.numeric(vals)
data$tmp_stream_order <- vals
tmp_group_name <- NULL
vals <- data[, group_name]
sf::st_geometry(vals) <- NULL
vals <- vals[, 1]
data$tmp_group_name <- vals
data$tmp_id <- 1:nrow(data)
# Split by each stratum and then sample without replacement
stdf <- data %>% dplyr::group_by(tmp_group_name) %>%
dplyr::slice_sample(n = n, replace = TRUE)
site_types <- data[which(data$tmp_id %in% unique(stdf$tmp_id)), ]
site_types <- site_types[which(!(duplicated(site_types$tmp_id))), ]
site_types$tmp_id <- NULL
site_types <- sf::st_zm(site_types)
# Sort by strata
site_types <- site_types[order(site_types$tmp_stream_order), ]
# Make unique name
site_types$site_id <- paste0("A_", 1:nrow(site_types),
"_", site_types$tmp_group_name)
table(site_types$strata)
head(site_types$site_id, 10)
head(site_types$STREAM_ORDER, 10)
tail(site_types$STREAM_ORDER, 10)
# Fix stream order column name
if(!(stream_order %in% colnames(data))) {
stop(paste0("Could not find a column named ", stream_order, ". Check stream_order argument"))
}
vals <- data[, stream_order]
sf::st_geometry(vals) <- NULL
vals <- vals[, 1]
vals <- as.numeric(vals)
data$tmp_stream_order <- vals
tmp_group_name <- NULL
vals <- data[, group_name]
sf::st_geometry(vals) <- NULL
vals <- vals[, 1]
data$tmp_group_name <- vals
data$tmp_id <- 1:nrow(data)
# Split by each stratum and then sample without replacement
stdf <- data %>% dplyr::group_by(tmp_group_name) %>%
dplyr::slice_sample(n = n, replace = TRUE)
site_types <- data[which(data$tmp_id %in% unique(stdf$tmp_id)), ]
site_types <- site_types[which(!(duplicated(site_types$tmp_id))), ]
site_types$tmp_id <- NULL
site_types <- sf::st_zm(site_types)
# Sort by strata
site_types <- site_types[order(site_types$tmp_stream_order), ]
# Make unique name
site_types$site_id <- paste0("A_", 1:nrow(site_types),
"_", site_types$tmp_group_name)
table(site_types$strata)
head(site_types$site_id, 10)
head(site_types$STREAM_ORDER, 10)
tail(site_types$STREAM_ORDER, 10)
View(site_types)
#' @title Grouped Random Sample
#'
#' @description
#' Take a simple random sample by a group
#'
#' @details
#' Note that there is no repeat sampling or replacement. If the sample size `n` exceeds the number of stream crossings in a stratum, then only the limited number of available crossings will be returned.
#' Stream order should be labelled as STREAM_ORDER.
#'
#' @param data A data object of class `sf`.
#' @param group_name String. Column name for the strata to sample across. It is assumed that `group_name` is `strata` and the values are `stratum_1` for stream segments less than 3rd order and `stratum_2` for stream segments 3rd order and greater.
#' @param n Sample size n for each stratum
#' @param stream_order Column name for stream order. Defaults to STREAM_ORDER.
#'
#' @return
#' A object of class `sf` of sample features.
#'
#' @export
grouped_random_sample <- function(data = NA, group_name = "strata", n = 20, stream_order = "STREAM_ORDER") {
# Fix stream order column name
if(!(stream_order %in% colnames(data))) {
stop(paste0("Could not find a column named ", stream_order, ". Check stream_order argument"))
}
vals <- data[, stream_order]
sf::st_geometry(vals) <- NULL
vals <- vals[, 1]
vals <- as.numeric(vals)
data$tmp_stream_order <- vals
tmp_group_name <- NULL
vals <- data[, group_name]
sf::st_geometry(vals) <- NULL
vals <- vals[, 1]
data$tmp_group_name <- vals
data$tmp_id <- 1:nrow(data)
# Split by each stratum and then sample without replacement
stdf <- data %>% dplyr::group_by(tmp_group_name) %>%
dplyr::slice_sample(n = n, replace = TRUE)
site_types <- data[which(data$tmp_id %in% unique(stdf$tmp_id)), ]
site_types <- site_types[which(!(duplicated(site_types$tmp_id))), ]
site_types$tmp_id <- NULL
site_types <- sf::st_zm(site_types)
# Sort by strata
site_types <- site_types[order(site_types$tmp_stream_order), ]
# Make unique name
site_types$site_id <- paste0("A_", 1:nrow(site_types),
"_", site_types$tmp_group_name)
site_types$tmp_group_name <- NULL
# Add stream order
so <- site_types$tmp_stream_order
site_types <- site_types[, c("site_id", group_name)]
site_types$type <- "type_a"
site_types$stream_order <- so
# Re-order dataframe
vals <- site_types[, group_name]
sf::st_geometry(vals) <- NULL
vals <- vals[, 1]
site_types <- site_types[order(vals), ]
return(site_types)
}
grouped_random_sample(data = crossings,
group_name = "strata",
n = 40,
stream_order = "STREAM_ORDER"
)
# Take a random sample of crossings by strata
site_type_a <- grouped_random_sample(data = crossings,
group_name = "strata",
n = 40,
stream_order = "STREAM_ORDER"
)
# -------------------------------------------
# (Optional) visualize
strm_plot <- sf::st_zm(ca_strm)
road_plot <- sf::st_zm(roads)
plot(sf::st_geometry(strm_plot), col = "darkblue", main = "Site Type A (stream crossing)")
plot(sf::st_geometry(road_plot), add = TRUE, col = "burlywood")
plot(sf::st_geometry(site_type_a), add = TRUE, col = ifelse(site_type_a$strata == "stratum_1", "black", "red"), pch = 19)
legend("topright", c("roads", "streams", "stratum 1", "stratum 2"), col = c("burlywood", "darkblue", "black", "red"), lwd = c(1, 1, NA, NA), pch = c(NA, NA, 19, 19))
# -------------------------------------------
# (Optional) visualize
strm_plot <- sf::st_zm(ca_strm)
road_plot <- sf::st_zm(roads)
plot(sf::st_geometry(strm_plot), col = "darkblue", main = "Site Type A (stream crossing)")
plot(sf::st_geometry(road_plot), add = TRUE, col = "burlywood")
plot(sf::st_geometry(site_type_a), add = TRUE, col = ifelse(site_type_a$strata == "stratum_1", "black", "red"), pch = 19)
legend("topright", c("roads", "streams", "stratum 1", "stratum 2"), col = c("burlywood", "darkblue", "black", "red"), lwd = c(1, 1, NA, NA), pch = c(NA, NA, 19, 19))
```r
# Run the function for road proximity samples
?road_proximity_sample
n = 60
strm = ca_strm
roads = roads
buffer_s1_m = 20
buffer_s2_m = 40
buffer_crossings_m = 50
small_strm_segment_m = 30
stream_order = "STREAM_ORDER"
# Bind for non-standard
tmp_group_name <- NULL
L1 <- NULL
# Fix stream order column name
if(!(stream_order %in% colnames(strm))) {
stop(paste0("Could not find a column named ", stream_order, ". Check stream_order argument"))
}
vals <- strm[, stream_order]
sf::st_geometry(vals) <- NULL
vals <- vals[, 1]
vals <- as.numeric(vals)
strm$tmp_stream_order <- vals
# Recreate stream road crossings
sc2 <- suppressWarnings({ sf::st_intersection(roads, strm) })
# Apply buffer - group s1
ssub <- strm[which(strm$tmp_stream_order < 3), ]
# make placeholder dataframe
skeep_sb_s1 <- data.frame()
buff <- sf::st_buffer(roads, buffer_s1_m) # 20 m
buff <- buff %>% dplyr::group_by() %>% dplyr::summarise()
# Taking the intersection of roads and this buffer,
print("Stratum 1 streams and road buffer...")
rint <- suppressWarnings({ sf::st_intersection(ssub, buff) })
rint <- suppressWarnings({ sf::st_cast(rint, "LINESTRING") })
rint$tmp <- "samp"
rint <- rint[, c("tmp")]
# Removing any stream crossings (site Type A)
# by excluding any cases within 100m of a
# crossing to avoid double counting,
sc2_100 <- sf::st_buffer(sc2, buffer_crossings_m)
sc2_100 <- sc2_100 %>% dplyr::group_by() %>% dplyr::summarise()
sdiff <- suppressWarnings({ sf::st_difference(rint, sf::st_union(sc2_100)) })
# Removing any segments <50m in length
# unless they are near a switch-back
# (determined by manual review of the map),
sdiff$length_m <- sf::st_length(sdiff)
sdiff$length_m <- as.numeric(sdiff$length_m)
skeep <- sdiff[which(sdiff$length_m > small_strm_segment_m), ]
skeep_sb_s1 <- skeep
print(paste0(nrow(skeep_sb_s1), " stream segments for Site Type B - Stratum 1"))
if(nrow(skeep_sb_s1) > 0) {
skeep_sb_s1$site_id <- paste0("B_", 1:nrow(skeep_sb_s1), "_stratum_1")
skeep_sb_s1$strata <- "stratum_1"
skeep_sb_s1$type <- "type_b"
skeep_sb_s1$tmp <- NULL
skeep_sb_s1 <- skeep_sb_s1[, c("site_id", "strata", "type", "length_m")]
}
# Apply buffer - group s1
ssub <- strm[which(strm$tmp_stream_order >= 3), ]
skeep_sb_s2 <- data.frame()
# Only run if stream segments available
if(nrow(ssub) > 0) {
buff <- sf::st_buffer(roads, buffer_s1_m) # 20 m
buff <- buff %>% dplyr::group_by() %>% dplyr::summarise()
# taking the intersection of roads and this buffer,
print("Stratum 2 streams and road buffer...")
rint <- suppressWarnings({ sf::st_intersection(ssub, buff) })
rint <- suppressWarnings({ sf::st_cast(rint, "LINESTRING") })
if(nrow(rint) > 0 ) {
rint$tmp <- "samp"
rint <- rint[, c("tmp")]
# (c) removing any stream crossings (site Type A)
# by excluding any cases within 100m of a
# crossing to avoid double counting
sc2_100 <- sf::st_buffer(sc2, buffer_crossings_m)
sc2_100 <- sc2_100 %>% dplyr::group_by() %>% dplyr::summarise()
sdiff <- suppressWarnings({ sf::st_difference(rint, sf::st_union(sc2_100)) })
# removing any segments <50m in length unless
# they are near a switch-back
# (determined by manual review of the map),
sdiff$length_m <- sf::st_length(sdiff)
sdiff$length_m <- as.numeric(sdiff$length_m)
skeep <- sdiff[which(sdiff$length_m > small_strm_segment_m), ]
skeep_sb_s2 <- skeep
print(paste0(nrow(skeep_sb_s2), " stream segments for Site Type B - Stratum 2"))
if(nrow(skeep_sb_s2) > 0) {
skeep_sb_s2$site_id <- paste0("B_", 1:nrow(skeep_sb_s2), "_stratum_2")
skeep_sb_s2$strata <- "stratum_2"
skeep_sb_s2$type <- "type_b"
skeep_sb_s2$tmp <- NULL
skeep_sb_s2 <- skeep_sb_s2[, c("site_id", "strata", "type", "length_m")]
}
}
}
# Merge together
if(nrow(skeep_sb_s1) == 0 & nrow(skeep_sb_s2) == 0) {
stop("No stream segments remaining - adjust buffer sizes")
}
if(nrow(skeep_sb_s1) == 0 & nrow(skeep_sb_s2) > 0) {
skeep_all <- skeep_sb_s2
}
if(nrow(skeep_sb_s1) > 0 & nrow(skeep_sb_s2) == 0) {
skeep_all <- skeep_sb_s1
}
if(nrow(skeep_sb_s1) > 0 & nrow(skeep_sb_s2) > 0) {
skeep_all <- rbind(skeep_sb_s1, skeep_sb_s2)
}
skeep_all$length_m <- round(skeep_all$length_m, 1)
# Sample by strata
s1 <- skeep_all$site_id[which(skeep_all$strata == "stratum_1")]
if(length(s1) > n) {
s1_samp <- sample(s1, size = n, replace = FALSE)
} else {
s1_samp <- s1
}
s2 <- skeep_all$site_id[which(skeep_all$strata == "stratum_2")]
if(length(s2) > n) {
s2_samp <- sample(s2, size = n, replace = FALSE)
} else {
s2_samp <- s2
}
samp_ids <- c(s1_samp, s2_samp)
# Point sample
ssamp <- skeep_all[which(skeep_all$site_id %in% samp_ids), ]
my_geom <- suppressWarnings({ sf::st_cast(ssamp, "LINESTRING") })
cm <- as.matrix(sf::st_coordinates(my_geom))
cm <- as.data.frame(cm)
first_pt <- cm %>% dplyr::group_by(L1) %>%
dplyr::slice(1)
first_pt <- as.data.frame(first_pt)
first_pt_sf <- sf::st_as_sf(first_pt, coords = c("X", "Y"))
sf::st_crs(first_pt_sf) <- sf::st_crs(strm)$epsg
if(nrow(first_pt_sf) != nrow(ssamp)) {
stop("bad coordinate breakdown...")
}
# Add column names
first_pt_sf$site_id  <- ssamp$site_id
first_pt_sf$strata   <- ssamp$strata
first_pt_sf$type     <- ssamp$type
first_pt_sf$length_m <- ssamp$length_m
first_pt_sf$L1 <- NULL
first_pt_sf <- first_pt_sf[, c("site_id", "strata", "type", "length_m")]
# Add on stream order
int_t <- suppressWarnings({ sf::st_intersection(strm, sf::st_buffer(first_pt_sf[, "site_id"], dist = 10)) })
add_order <- int_t[, c("site_id", stream_order)]
sf::st_geometry(add_order) <- NULL
add_order <- add_order[!(duplicated(add_order)), ]
add_order$stream_order <- as.numeric(add_order[, stream_order])
add_order <- add_order[, c("site_id", "stream_order")]
first_pt_sf_so <- merge(first_pt_sf, add_order,
by.x = "site_id",
by.y = "site_id",
all.x = TRUE,
all.y = FALSE)
library(mapview)
mapview(line_segments)
mapview(skeep_all)
mapview(list(skeep_all, first_pt_sf_so))
type_b <- road_proximity_sample(
n = 60,
strm = ca_strm,
roads = roads,
buffer_s1_m = 20,
buffer_s2_m = 40,
buffer_crossings_m = 50, # originally 100m
small_strm_segment_m = 30, # originally 50m
stream_order = "STREAM_ORDER"
)
# Distances adjusted to provide better fit for this urban watershed
# Get the points object
names(type_b)
site_type_b <- type_b$points
line_segments <- type_b$line_segments
table(site_type_b$strata)
# (Optional) visualize
strm_plot <- sf::st_zm(ca_strm)
road_plot <- sf::st_zm(roads)
plot(sf::st_geometry(strm_plot), col = "darkblue", main = "Site Type B (road proximity)")
plot(sf::st_geometry(road_plot), add = TRUE, col = "burlywood")
plot(sf::st_geometry(site_type_b), add = TRUE, col = ifelse(site_type_b$strata == "stratum_1", "black", "red"), pch = 19)
legend("topright", c("roads", "streams", "stratum 1", "stratum 2"), col = c("burlywood", "darkblue", "black", "red"), lwd = c(1, 1, NA, NA), pch = c(NA, NA, 19, 19))
View(site_type_b)
skeep_sb_s2
skeep_all
first_pt_sf_so
samp_ids
skeep_all
ssamp
skeep_all
View(skeep_all)
View(first_pt_sf_so)
# order by stream order then site ID
first_pt_sf_so <- first_pt_sf_so[order(first_pt_sf_so$stream_order), ]
View(first_pt_sf_so)
# order by stream order then site ID
first_pt_sf_so <- first_pt_sf_so[order(first_pt_sf_so$stream_order, first_pt_sf_so$site_id), ]
View(first_pt_sf_so)
first_pt_sf_so <- merge(first_pt_sf, add_order,
by.x = "site_id",
by.y = "site_id",
all.x = TRUE,
all.y = FALSE)
# order by stream order then site ID
first_pt_sf_so <- first_pt_sf_so[order(first_pt_sf_so$stream_order), ]
``` r
# You may need to install remotes
library(remotes)
# Choose all if promp to update packages
remotes::install_github("essatech/wsep.t2")
library(wsep.t2)
```
## Example Usage ##
rm(list = ls())
devtools::load_all()
devtools::document()
?constrain_streams
devtools::test()  # Run tests
devtools::check() # Operating system test
devtools::check() # Operating system test
library(gtools)
remove.packages("wsep.t2")
remove.packages("wsep.t2")
remove.packages("wsep.t2")
rm(list = ls())
devtools::load_all()
devtools::document()
?constrain_streams
devtools::check() # Operating system test
#----------------------------------------------------
library(devtools)
rm(list = ls())
devtools::load_all()
devtools::document()
?constrain_streams
devtools::check() # Operating system test
# Load the WSEP Tier 2 R-package
library(wsep.t2)
# Will must re-project our data so that x,y are cartesian coordinates with units of meters
strm <- utm_projection(data = strm)
# Then constrain the sampling frame to remove 1st order tribs less than 500 m in length and clip the upper 200 m off of other tributaries. see ?constrain_streams for details
c_ctrm <- constrain_streams(strm = strm,
length_remove = 500,
length_trim = 200)
# Remove lakes and other lotic reaches.
# Consider removing any other lakes manually or through a simple filter
c_strm <- remove_lentic_bcfwa(strm = c_ctrm,
EDGE_TYPE = "EDGE_TYPE")
# Remove alpine areas
# In this example set to all segments over 800 m (adjust this value for your region)
ca_strm <- remove_alpine_bcfwa(strm = c_strm,
elevation_threshold = 800)
# (Optional) Visualize original (raw) and constrained streams.
# Finalize and adjust with any additional filters
strm1_plot <- sf::st_zm(strm)
strm2_plot <- sf::st_zm(ca_strm)
plot(sf::st_geometry(strm1_plot), col = "lightgrey",
main = "Constrained Streams")
plot(sf::st_geometry(strm2_plot), col = "blue", add = TRUE)
legend("topright", c("original", "adjusted"),
col = c("lightgrey", "blue"), lwd = 1)
# Run with sample dataset
library(wsep.t2)
data(TsolumStreams)
strm <- TsolumStreams
data(TsolumRoads)
roads <- TsolumRoads
# Import your own data here (update directories and uncomment lines)
# library(sf)
# strm <- st_read(dsn = "my_watershed.gdb", layer = "my_streams")
# roads <- st_read(dsn = "my_watershed.gdb", layer = "my_roads")
# Load the WSEP Tier 2 R-package
library(wsep.t2)
# Will must re-project our data so that x,y are cartesian coordinates with units of meters
strm <- utm_projection(data = strm)
# Then constrain the sampling frame to remove 1st order tribs less than 500 m in length and clip the upper 200 m off of other tributaries. see ?constrain_streams for details
c_ctrm <- constrain_streams(strm = strm,
length_remove = 500,
length_trim = 200)
# Remove lakes and other lotic reaches.
# Consider removing any other lakes manually or through a simple filter
c_strm <- remove_lentic_bcfwa(strm = c_ctrm,
EDGE_TYPE = "EDGE_TYPE")
# Remove alpine areas
# In this example set to all segments over 800 m (adjust this value for your region)
ca_strm <- remove_alpine_bcfwa(strm = c_strm,
elevation_threshold = 800)
# (Optional) Visualize original (raw) and constrained streams.
# Finalize and adjust with any additional filters
strm1_plot <- sf::st_zm(strm)
strm2_plot <- sf::st_zm(ca_strm)
plot(sf::st_geometry(strm1_plot), col = "lightgrey",
main = "Constrained Streams")
plot(sf::st_geometry(strm2_plot), col = "blue", add = TRUE)
legend("topright", c("original", "adjusted"),
col = c("lightgrey", "blue"), lwd = 1)
# and that units are in meters (cartesian coordinates)
roads <- utm_projection(data = roads)
strm = strm
constrained_strm = ca_strm
roads = roads
stream_order = "STREAM_ORDER"
summary_type = "stream_lengths"
# Fix stream order column name
if(!(stream_order %in% colnames(constrained_strm))) {
stop(paste0("Could not find a column named ", stream_order, ". Check stream_order argument"))
}
vals <- constrained_strm[, stream_order]
sf::st_geometry(vals) <- NULL
vals <- vals[, 1]
vals <- as.numeric(vals)
constrained_strm$tmp_stream_order <- vals
# Fix stream order column name
if(!(stream_order %in% colnames(strm))) {
stop(paste0("Could not find a column named ", stream_order, ". Check stream_order argument"))
}
vals <- strm[, stream_order]
sf::st_geometry(vals) <- NULL
vals <- vals[, 1]
vals <- as.numeric(vals)
strm$tmp_stream_order <- vals
# Recreate stream road crossings
sc1 <- suppressWarnings({ sf::st_intersection(roads, strm) })
sc2 <- suppressWarnings({ sf::st_intersection(roads, constrained_strm) })
strm$strata <- NA
strm$strata <- ifelse(strm$STREAM_ORDER < 3, "stratum_1", strm$strata)
strm$strata <- ifelse(strm$STREAM_ORDER >= 3, "stratum_2", strm$strata)
constrained_strm$strata <- NA
constrained_strm$strata <- ifelse(constrained_strm$STREAM_ORDER < 3, "stratum_1", constrained_strm$strata)
constrained_strm$strata <- ifelse(constrained_strm$STREAM_ORDER >= 3, "stratum_2", constrained_strm$strata)
strm$length_m <- sf::st_length(strm)
strm$length_m <- sf::st_length(strm)
constrained_strm$length_m <- sf::st_length(constrained_strm)
constrained_strm
strm$length_m <- as.numeric(sf::st_length(strm))
constrained_strm$length_m <- as.numeric(sf::st_length(constrained_strm))
constrained_strm
constrained_strm$length_m[which(constrained_strm$strata == "stratum_1")]
s1 <- sum(constrained_strm$length_m[which(constrained_strm$strata == "stratum_1")])
s2 <- sum(constrained_strm$length_m[which(constrained_strm$strata == "stratum_2")])
s3 <- sum(constrained_strm$length_m)
s1
s2
s3
